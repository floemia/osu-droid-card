{"version":3,"sources":["../src/functions.ts","../src/index.ts"],"sourcesContent":["import { createCanvas, loadImage, GlobalFonts } from \"@napi-rs/canvas\"\r\nimport { getAverageColor } from \"fast-average-color-node\"\r\nimport { APIBeatmap, DroidCardParameters } from \"typings\";\r\nimport { droid } from \"osu-droid-scraping\";\r\nimport path from \"path\";\r\nimport { fileURLToPath } from 'url';\r\nimport { dirname } from \"path\";\r\n\r\n/**\r\n * Generates an osu!droid profile card with relevant data, statistics and top plays.\r\n * \r\n * @param params Parameters for card generation.\r\n */\r\nexport const card = async (params: DroidCardParameters) => {\r\n\tif (!params.user) {\r\n\t\tif (!params.uid) return undefined\r\n\t\tconst data = await droid.request(params.uid)\r\n\t\tif (!data) return undefined\r\n\t\tparams.user = (await droid.user({ uid: params.uid, response: data }))!\r\n\t\tparams.scores = (await droid.scores({ uid: params.uid, type: \"top\", response: data }))!\r\n\t}\r\n\tif (!params.scores) return undefined\r\n\tconst canvas = createCanvas(1100, 650)\r\n\tconst ctx = canvas.getContext(\"2d\")\r\n\tlet dir;\r\n\ttry {\r\n\t  dir = __dirname;\r\n\t} catch (e) {\r\n\t  dir = dirname(fileURLToPath(import.meta.url));\r\n\t}\r\n\r\n\tGlobalFonts.registerFromPath(path.join(dir, `../assets/fonts/SF-Pro-Rounded-Bold.otf`), \"sftitle\");\r\n\tGlobalFonts.registerFromPath(path.join(dir, `../assets/fonts/SF-Pro-Rounded-Medium.otf`), \"sfbody\");\r\n\r\n\tctx.beginPath(); ctx.roundRect(0, 0, 1100, 650, 60); ctx.closePath() // rounded corners for the card\r\n\tctx.clip()\t// clip everything to maintain rounded corners\r\n\r\n\tconst background = await loadImage(path.join(dir, `../assets/images/background/bg.png`))\r\n\tctx.drawImage(background, 0, 0, background.width * 1.2, background.width * 1.2);\r\n\tconst avatar = await loadImage(params.user.avatar_url)\r\n\tconst accent = await getAverageColor(params.user.avatar_url)\r\n\r\n\tlet color = increase_brightness(accent.hex, brightness_percent(accent.hex))\r\n\tctx.fillStyle = color + `33`\r\n\tctx.globalCompositeOperation = \"source-atop\"\r\n\tctx.fillRect(0, 0, 1100, 650)\r\n\tctx.globalCompositeOperation = \"source-over\"\r\n\tconst bg_gradient = ctx.createLinearGradient(0, 0, 0, 650)\r\n\tbg_gradient.addColorStop(1, color + \"34\")\r\n\tbg_gradient.addColorStop(0, `rgba(0,0,0,0)`)\r\n\tctx.fillStyle = bg_gradient\r\n\tctx.fillRect(0, 0, 1100, 650)\r\n\r\n\r\n\tctx.shadowColor = \"rgba(0,0,0,0.7)\";\r\n\tctx.shadowBlur = 15;\r\n\r\n\tctx.save()\r\n\tctx.fillStyle = \"white\";\r\n\tctx.beginPath(); ctx.roundRect(40, 40, 180, 180, 40); ctx.fill()\r\n\tctx.clip();\r\n\tctx.drawImage(avatar, 40, 40, 180, 180)\r\n\r\n\tctx.restore()\r\n\r\n\tctx.beginPath(); ctx.roundRect(0, 260, 1100, 500, 60)\r\n\tctx.fillStyle = \"rgba(0,0,0,0.5)\"\r\n\tctx.roundRect(650, 235, 310, 60, 20);\r\n\tctx.fill()\r\n\r\n\r\n\tctx.fillStyle = color\r\n\tctx.font = \"50px sftitle\"\r\n\tctx.fillText(params.user.username, 260, 110)\r\n\r\n\tconst flag = await loadImage(flag_url(params.user.country))\r\n\r\n\tctx.save()\r\n\tctx.fillStyle = \"white\"\r\n\tctx.drawImage(flag, 260, 140, flag.width * 1.5, flag.height * 1.5)\r\n\tctx.restore()\r\n\r\n\tctx.fillStyle = \"rgb(255,255,255)\"\r\n\tctx.font = \"40px sftitle\"\r\n\tctx.fillText(new Intl.DisplayNames([`en`], { type: \"region\" }).of(params.user.country) || `Nowhere`, 335, 180)\r\n\r\n\tlet titles = [\"DPP\", \"DPP RANK\", \"SCORE RANK\"]\r\n\tlet values = [params.user.dpp, params.user.rank.dpp, params.user.rank.score]\r\n\tfor (let x = 40, index = 0; x <= 400; x += 176.66, index++) {\r\n\t\tctx.fillStyle = color\r\n\t\tctx.beginPath(); ctx.roundRect(x, 300, 136.66, 10, 20); ctx.fill()\r\n\r\n\t\tctx.font = \"15px sftitle\"\r\n\t\tctx.fillText(titles[index], x, 330)\r\n\r\n\t\tctx.font = \"30px sftitle\";\r\n\t\tif (index > 0) {\r\n\t\t\tif (values[index] <= 150 && values[index] > 50) ctx.fillStyle = \"rgb(255,228,100)\"\r\n\t\t\telse if (values[index] <= 50) ctx.fillStyle = \"rgb(133,211,255)\"\r\n\t\t\telse ctx.fillStyle = \"rgb(255,255,255)\"\r\n\t\t} else ctx.fillStyle = \"rgb(255,255,255)\"\r\n\t\tctx.fillText(`${index > 0 ? `#` : \"\"}${values[index].toLocaleString(\"en-US\")}`, x, 360)\r\n\t}\r\n\r\n\tlet stats_titles = [\"RANKED SCORE\", \"HIT ACCURACY\", \"PLAYCOUNT\"]\r\n\tlet stats_values = [params.user.ranked_score, params.user.accuracy.toFixed(2), params.user.playcount]\r\n\tctx.font = \"28px sftitle\";\r\n\tfor (let y = 415, index = 0; y < 415 + 55 * 3; y += 55, index++, ctx.textAlign = \"left\") {\r\n\r\n\t\tctx.fillStyle = color\r\n\t\tctx.fillText(stats_titles[index], 40, y)\r\n\t\tctx.fillStyle = `rgb(255,255,255)`\r\n\t\tctx.textAlign = \"right\"\r\n\t\tctx.fillText(stats_values[index].toLocaleString(\"en\") + `${index == 1 ? \"%\" : \"\"}`, 530, y)\r\n\t}\r\n\r\n\tconst logo = await loadImage(path.join(dir, `../assets/images/logo50px.png`))\r\n\tctx.drawImage(logo, 40, 560)\r\n\tctx.fillText(\"osu!droid\", 105, 593)\r\n\r\n\tctx.beginPath(); ctx.roundRect(650, 235, 310, 60, 20);\r\n\tctx.fillStyle = `rgba(0,0,0,0.01)`\r\n\tctx.fill()\r\n\tctx.fillStyle = color\r\n\tctx.font = \"30px sftitle\";\r\n\tctx.textAlign = \"center\"\r\n\tctx.fillText(\"TOP PLAYS\", 805, 275)\r\n\r\n\tlet y = 300\r\n\tif (params.scores.length > 3) params.scores.length = 3\r\n\tfor (const score of params.scores) {\r\n\t\tctx.textAlign = \"left\"\r\n\t\tlet radius = [30, 30, 30, 30]\r\n\t\tif (params.scores.length > 1) {\r\n\t\t\tif (score == params.scores[0]) radius = [30, 30, 10, 10]\r\n\t\t\telse if (score == params.scores[1]) {\r\n\t\t\t\tif (params.scores.length == 2) radius = [10, 10, 30, 30]\r\n\t\t\t\telse radius = [10, 10, 10, 10]\r\n\t\t\t}\r\n\t\t\telse radius = [10, 10, 30, 30]\r\n\r\n\t\t}\r\n\t\tconst beatmap: APIBeatmap = await fetch_beatmap(score.hash)\r\n\r\n\t\tctx.beginPath(); ctx.roundRect(570, y, 490, 100, radius)\r\n\r\n\r\n\t\tconst mods_str = `${score.mods.acronyms ? `+${score.mods.acronyms.join(\"\") || \"NM\"}` : \"\"}${score.mods.speed != 1 ? ` (${score.mods.speed.toFixed(2)}x)` : \"\"}, ${score.accuracy.toFixed(2)}%`\r\n\t\tif (beatmap) {\r\n\t\t\tconst cover = `https://assets.ppy.sh/beatmaps/${beatmap.beatmapset_id}/covers/cover.jpg`\r\n\t\t\tctx.save()\r\n\t\t\tctx.clip()\r\n\t\t\tctx.filter = \"blur(1px) brightness(35%)\"\r\n\t\t\ttry {\r\n\t\t\t\tconst bg = await loadImage(cover)\r\n\t\t\t\tctx.drawImage(bg, 570, y, bg.width / 1.5, bg.height / 1.5)\r\n\t\t\t} catch {\r\n\t\t\t\tconst bg = await loadImage(path.join(dir, `../assets/images/background/default-bg@2x.png`))\r\n\t\t\t\tctx.drawImage(bg, 570, y, bg.width / 1.5, bg.height / 1.5)\r\n\t\t\t}\r\n\r\n\t\t\tctx.restore()\r\n\r\n\t\t\tctx.font = \"25px sftitle\"\r\n\t\t\tlet avg\r\n\t\t\ttry {\r\n\t\t\t\tavg = await getAverageColor(cover)\r\n\t\t\t} catch {\r\n\t\t\t\tavg = await getAverageColor(path.join(dir, `../assets/images/background/default-bg.png`))\r\n\t\t\t}\r\n\t\t\tavg.hex = increase_brightness(avg.hex, brightness_percent(avg.hex))\r\n\r\n\t\t\tctx.save()\r\n\t\t\tconst title_gradient = ctx.createLinearGradient(660, 45, 1030 - ctx.measureText(`${score.dpp}dpp`).width, 45)\r\n\t\t\ttitle_gradient.addColorStop(0, avg.hex)\r\n\t\t\ttitle_gradient.addColorStop(0.94, avg.hex)\r\n\t\t\ttitle_gradient.addColorStop(1, `rgba(0,0,0,0)`)\r\n\t\t\tctx.fillStyle = title_gradient\r\n\r\n\t\t\tctx.fillText(beatmap.title, 660, y + 45)\r\n\t\t\tctx.restore()\r\n\t\t\tctx.font = \"13px sftitle\"\r\n\t\t\tconst version_gradient = ctx.createLinearGradient(660, 45, 1030 - ctx.measureText(mods_str).width, 45)\r\n\t\t\tversion_gradient.addColorStop(0, \"white\")\r\n\t\t\tversion_gradient.addColorStop(0.94, \"white\")\r\n\t\t\tversion_gradient.addColorStop(1, `rgba(0,0,0,0)`)\r\n\t\t\tctx.fillStyle = version_gradient\r\n\t\t\tctx.font = \"20px sftitle\"\r\n\t\t\tctx.fillText(`[${beatmap.version}]`, 660, y + 72)\r\n\r\n\t\t} else ctx.fill()\r\n\r\n\t\tctx.fillStyle = \"white\"\r\n\t\tctx.textAlign = \"right\"\r\n\t\tctx.font = \"25px sftitle\"\r\n\t\tctx.fillText(`${score.dpp.toLocaleString(\"en-US\")}dpp`, 1030, y + 45)\r\n\t\tctx.font = \"13px sftitle\"\r\n\t\tctx.fillText(mods_str, 1030, y + 71)\r\n\t\tconst rank = await loadImage(path.join(dir, `../assets/images/ranks/${score.rank}55px.png`));\r\n\t\tctx.drawImage(rank, 585, y + 10, 65, 81)\r\n\t\ty += 105\r\n\t}\r\n\r\n\tconst buffer = await canvas.encode(\"png\")\r\n\treturn buffer\r\n}\r\n\r\nconst fetch_beatmap = async (hash: string) => {\r\n\tif (process.env.OSU_API_KEY) {\r\n\t\tconst key = process.env.OSU_API_KEY\r\n\t\tconst response = await fetch(`https://osu.ppy.sh/api/get_beatmaps?k=${key}&h=${hash}`)\r\n\t\tif (!response.ok) {\r\n\t\t\tthrow new Error(`Error: ${response.statusText}`);\r\n\t\t}\r\n\t\tconst tojson = await response.json()\r\n\t\tif (tojson.length) return tojson[0]\r\n\t} else {\r\n\t\tthrow new Error(`An osu! api key must be present in your .env file as OSU_API_KEY.`)\r\n\t}\r\n}\r\n\r\nconst increase_brightness = (hex: string, percent: number) => {\r\n\tlet r = parseInt(hex.slice(1, 3), 16);\r\n\tlet g = parseInt(hex.slice(3, 5), 16);\r\n\tlet b = parseInt(hex.slice(5, 7), 16);\r\n\r\n\tr = Math.min(255, Math.max(0, Math.round(r + (r * percent) / 100)));\r\n\tg = Math.min(255, Math.max(0, Math.round(g + (g * percent) / 100)));\r\n\tb = Math.min(255, Math.max(0, Math.round(b + (b * percent) / 100)));\r\n\r\n\tconst toHex = (value: number) => value.toString(16).padStart(2, \"0\").toUpperCase();\r\n\treturn `#${toHex(r)}${toHex(g)}${toHex(b)}`;\r\n}\r\n\r\nconst brightness_percent = (hex: string) => {\r\n\tconst r = parseInt(hex.slice(1, 3), 16) / 255;\r\n\tconst g = parseInt(hex.slice(3, 5), 16) / 255;\r\n\tconst b = parseInt(hex.slice(5, 7), 16) / 255;\r\n\r\n\tconst luminance = (channel: number) => {\r\n\t\treturn channel <= 0.03928\r\n\t\t\t? channel / 12.92\r\n\t\t\t: Math.pow((channel + 0.055) / 1.055, 2.4);\r\n\t};\r\n\tconst relativeLuminance = 0.2126 * luminance(r) + 0.7152 * luminance(g) + 0.0722 * luminance(b);\r\n\r\n\tif (relativeLuminance > 0.6) {\r\n\t\treturn 0\r\n\t} else if (relativeLuminance > 0.4) {\r\n\t\treturn 10\r\n\t} else if (relativeLuminance > 0.3) {\r\n\t\treturn 20\r\n\t} else if (relativeLuminance > 0.2) {\r\n\t\treturn 30\r\n\t} else if (relativeLuminance > 0.07) {\r\n\t\treturn 70\r\n\t} else {\r\n\t\treturn 190\r\n\t}\r\n}\r\n\r\nconst flag_url = (countryCode: string) => {\r\n\tconst codePoints = countryCode\r\n\t\t.toLowerCase()\r\n\t\t.split('')\r\n\t\t.map(char => 0x1F1E6 + char.charCodeAt(0) - 97)\r\n\r\n\tconst base_url = 'https://osu.ppy.sh/assets/images/flags/';\r\n\tconst file_name = codePoints.map(cp => cp.toString(16)).join('-') + '.svg';\r\n\r\n\treturn base_url + file_name;\r\n}","import { card } from \"./functions\";\r\nimport type { DroidCardParameters } from \"../typings/index\"\r\nexport { card }\r\nexport type { DroidCardParameters }\r\n\r\nexport default {\r\n\tcard\r\n}"],"mappings":"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","names":["y"]}