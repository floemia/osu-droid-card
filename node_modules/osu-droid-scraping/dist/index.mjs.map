{"version":3,"sources":["../src/functions.ts","../src/index.ts"],"sourcesContent":["import type { DroidMods, DroidScore, DroidScoreParameters, DroidUser, DroidUserParameters } from \"../typings/index.d.ts\";\r\n/**\r\n * Given the `uid` of an osu!droid account, returns a `DroidUser` with all of their parsed info from `osu!droid.moe`.\r\n * \r\n * Returns `{ error: \"User doesn't exist.\" }` if the user doesn't exist.\r\n *\r\n * @param {DroidScoreParameters} params - Parameters for osu!droid user fetching.\r\n*/\r\nconst user = async (params: DroidUserParameters): Promise<DroidUser | { error: string }> => {\r\n\tlet data = params.response ? params.response : await request(params.uid)\r\n\tif (typeof (data) != \"string\" && \"error\" in data) return data\r\n\r\n\t// get rid of unnecessary data\r\n\tdata = data.split(\"<!--Top Plays-->\")[0];\r\n\r\n\t/**\r\n\t * `country_and_ranks[0]` - Country code.\r\n\t * \r\n\t * `country_and_ranks[1]` - Score rank.\r\n\t * \r\n\t * `country_and_ranks[2]` - DPP rank.\r\n\t */\r\n\tconst country_and_ranks = data.match(/(?<=<a>)(.*?)(?=<\\/a>)/g)!\r\n\tconst country = country_and_ranks.shift()!\r\n\r\n\tconst ranks = country_and_ranks.map(x => Number(x.replace(\"#\", \"\")))\r\n\r\n\t/**\r\n\t * As of writing:\r\n\t * \r\n\t * `tech_data[0]` - Ranked score.\r\n\t * \r\n\t * `tech_data[1]` - DPP amount.\r\n\t * \r\n\t * `tech_data[2]` - Hit accuracy.\r\n\t * \r\n\t * `tech_data[3]` - Playcount.\r\n\t */\r\n\tconst tech_data = data.match(/(?<=<\\/td> <td>)(.*?)(?=<\\/td> <\\/tr>)/g)!\r\n\treturn {\r\n\t\tusername: data.match(/(?<=15px; color: #EB2F96;\">)(.*?)(?=<\\/a>)/g)![0],\r\n\t\tavatar_url: `https://osudroid.moe/user/avatar/${data.match(/(?<=src=\".\\/user\\/avatar\\/)(.*?)(?=\")/g)![0]}`,\r\n\t\tid: params.uid,\r\n\t\trank: {\r\n\t\t\tscore: ranks[0],\r\n\t\t\tdpp: ranks[1]\r\n\t\t},\r\n\t\tcountry: country,\r\n\t\tranked_score: Number(tech_data[0].replace(/,/g, '')),\r\n\t\tdpp: Number(tech_data[1].replace(/,|pp/g, '')),\r\n\t\taccuracy: Number(tech_data[2].replace(\"%\", '')),\r\n\t\tplaycount: Number(tech_data[3]),\r\n\t}\r\n}\r\n\r\n/**\r\n* Given the `uid` of an osu!droid account, returns the user's scores, parsed from `osudroid.moe`.\r\n*\r\n * @param {DroidScoreParameters} params - Parameters for osu!droid user's scores fetching.\r\n*/\r\nconst scores = async (params: DroidScoreParameters): Promise<DroidScore[] | { error: string }> => {\r\n\tlet data = params.response ? params.response : await request(params.uid!)\r\n\tif (typeof (data) != \"string\" && \"error\" in data) return data\r\n\r\n\tconst user = await droid.user!({ uid: params.uid, response: data })\r\n\tif (\"error\" in user) return user\r\n\t// delete unimportant data\r\n\tdata = data.split(\"<!--Top Plays-->\")[1].split(\"Recent Plays</b>\")[params.type == \"recent\" ? 1 : 0]\r\n\r\n\tconst scores = data.match(/(?<=<a class=\"\">)(.*?)(?=<\\/span>)/g)\r\n\tif (!scores) return []\r\n\tif (params.limit && params.limit > 0 && params.limit < scores.length) scores.length = params.limit\r\n\r\n\tconst scores_array: DroidScore[] = []\r\n\r\n\tfor (const score of scores) {\r\n\t\tscores_array.push({\r\n\t\t\ttitle: score.match(/(?<=<strong class=\"\">)(.*?)(?=<\\/strong>)/g)![0],\r\n\t\t\trank: score.match(/(?<=\\/assets\\/img\\/ranking-)(.*?)(?=.png\")/g)![0],\r\n\t\t\tscore: Number(score.match(/(?<=score: )(.*?)(?= \\/ )/g)![0].replace(/,/g, '')),\r\n\t\t\ttimestamp: new Date(score.match(/(?<=style=\"margin-left: 50px;\">)(.*?)(?= \\/)/g)![0]).getTime(),\r\n\t\t\tdpp: Number(score.match(/(?<=pp:)(.*?)(?=\\/)/g)![0].replace(\",\", \"\")),\r\n\t\t\tmods: droid.mods(score.match(/(?<=mod:)(.*?)(?=\\/)/g)![0].replace(/ |x/g, '').split(\",\")),\r\n\t\t\taccuracy: Number(score.match(/(?<=accuracy: )(.*?)(?=%)/g)![0]),\r\n\t\t\tcombo: Number(score.match(/(?<=combo: )(.*?)(?= x)/g)![0]),\r\n\t\t\tmisses: Number(score.match(/(?<=miss: )(.*?)(?=<)/g)![0]),\r\n\t\t\thash: score.match(/(?<=\"hash\":)(.*?)(?=})/g)![0],\r\n\t\t\tuser: user!\r\n\t\t})\r\n\t}\r\n\treturn scores_array\r\n}\r\n\r\n\r\n/**\r\n* Given the `uid` of an osu!droid account, retrieves the HTML source code of the user's page from `osudroid.moe`.\r\n*\r\n* Returns `{ error: \"User doesn't exist.\" }` if the user doesn't exist.\r\n* \r\n* @param {number} uid - The UID of the osu!droid account.\r\n*/\r\nconst request = async (uid: number): Promise<string | { error: string }> => {\r\n\tlet data;\r\n\ttry {\r\n\t\tconst response = await fetch(`https://osudroid.moe/profile.php?uid=${uid}`)\r\n\t\tif (!response.ok) {\r\n\t\t\tthrow new Error(`Error: ${response.statusText}`);\r\n\t\t}\r\n\t\tdata = await response.text()\r\n\t\tif (data.includes(\"<h1>User not found.</h1>\")) return { error: \"User doesn't exist.\" }\r\n\t} catch (error) {\r\n\t\treturn { error: `Network / Address / Internal error.` }\r\n\t}\r\n\t// remove useless stuff\r\n\treturn data.replace(/\\n| +(?= )|> </g, '').split(\"<!--Avatar, Region, Rank-->\")[1].split(`<footer class=\"footer\">`)[0]\r\n}\r\n\r\n/**\r\n * Given an array of mods (full name), returns `DroidMods`.\r\n * \r\n * It contains all of the mods' acronyms and the added speed rate multiplier.\r\n * \r\n * @param {string[]} mods_arr - Array with mods with their respective full names `( [HardRock, Hidden, ...] )`.\r\n */\r\nconst mods = (mods_arr: string[]): DroidMods => {\r\n\tlet mods: DroidMods = {\r\n\t\tacronyms: [],\r\n\t\tspeed: 1.0,\r\n\t}\r\n\tfor (const mod of mods_arr) {\r\n\t\tswitch (mod.toLowerCase()) {\r\n\t\t\tcase \"easy\": mods.acronyms.push(\"EZ\"); break;\r\n\t\t\tcase \"nofail\": mods.acronyms.push(\"NF\"); break;\r\n\t\t\tcase \"halftime\": mods.acronyms.push(\"HT\"); break;\r\n\t\t\tcase \"hardrock\": mods.acronyms.push(\"HR\"); break;\r\n\t\t\tcase \"hidden\": mods.acronyms.push(\"HD\"); break;\r\n\t\t\tcase \"doubletime\": mods.acronyms.push(\"DT\"); break;\r\n\t\t\tcase \"nightcore\": mods.acronyms.push(\"NC\"); break;\r\n\t\t\tcase \"flashlight\": mods.acronyms.push(\"FL\"); break;\r\n\t\t\tcase \"suddendeath\": mods.acronyms.push(\"SD\"); break;\r\n\t\t\tcase \"perfect\": mods.acronyms.push(\"PF\"); break;\r\n\t\t\tcase \"precise\": mods.acronyms.push(\"PR\"); break;\r\n\t\t\tcase \"none\": break;\r\n\t\t\tcase \"\": break;\r\n\t\t\tdefault: mods.speed = Number(mod)\r\n\t\t}\r\n\t}\r\n\treturn mods\r\n}\r\n\r\n/**\r\n * Core of the module. It contains all of the functions.\r\n*/\r\nexport const droid = {\r\n\t/**\r\n\t * Given the `uid` of an osu!droid account, returns a `DroidUser` with all of their parsed info from `osu!droid.moe`.\r\n\t * \r\n\t * Returns `{ error: \"User doesn't exist.\" }` if the user doesn't exist.\r\n\t *\r\n\t * @param {DroidScoreParameters} params - Parameters for osu!droid user fetching.\r\n\t*/\r\n\tuser,\r\n\r\n\t/**\r\n\t * Given the `uid` of an osu!droid account, returns the user's scores, parsed from `osudroid.moe`.\r\n\t *\r\n\t * @param {DroidScoreParameters} params - Parameters for osu!droid user's scores fetching.\r\n\t*/\r\n\tscores,\r\n\r\n\t/**\r\n\t * Given an array of mods (full name), returns `DroidMods`.\r\n\t * \r\n\t * It contains all of the mods' acronyms and the added speed rate multiplier.\r\n\t * \r\n\t * @param {string[]} mods_arr - Array with mods with their respective full names `( [HardRock, Hidden, ...] )`.\r\n\t*/\r\n\tmods,\r\n\r\n\t/**\r\n\t * Given the `uid` of an osu!droid account, retrieves the HTML source code of the user's page from `osudroid.moe`.\r\n\t * \r\n\t * Returns `{ error: \"User doesn't exist.\" }` if the user doesn't exist.\r\n\t * @param {number} uid - The UID of the osu!droid account.\r\n\t*/\r\n\trequest\r\n}","import { droid } from \"./functions\";\r\nimport type { DroidMods, DroidUser, DroidScore, DroidScoreParameters, DroidUserParameters } from \"../typings/index\"\r\n\r\nexport { droid }\r\nexport type { DroidMods, DroidScore, DroidUser, DroidScoreParameters, DroidUserParameters }\r\n\r\n\r\nexport default {\r\n\tdroid,\r\n}"],"mappings":"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","names":["user","scores","mods"]}