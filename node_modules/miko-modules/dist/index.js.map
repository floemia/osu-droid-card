{"version":3,"sources":["../src/index.ts","../src/functions.ts","../src/DroidScore/DroidScore.ts","../src/DroidScore/DroidBanchoScore.ts","../src/APIHandler/APIHandler.ts","../src/Utils/Utils.ts","../src/DroidScore/DroidRXScore.ts","../src/DroidUser/DroidUser.ts","../src/DroidAPI/DroidScrape.ts","../src/DroidAPI/DroidAPI.ts","../src/DroidUser/DroidBanchoUser.ts","../src/DroidUser/DroidRXUser.ts"],"sourcesContent":["export { miko } from \"./functions\";\r\nimport type { NewDroidResponse, DroidScoreExtended, NewDroidResponseScore, HitStatistics, DroidScoreCalculatedData, DroidBanchoScoresParameters, NewDroidUserParameters, NewDroidRequestParameters, DroidScoreListPaginationParameters, DroidRXScoreResponse, DroidRXUserParameters, DroidRXScoreParameters, DroidPerformanceCalculatorParameters, DroidCalculatedData, DroidRXBeatmap } from \"../typings/index\"\r\nexport { NewDroidResponse, DroidScoreExtended, NewDroidResponseScore, HitStatistics, DroidScoreCalculatedData, DroidBanchoScoresParameters, NewDroidUserParameters, NewDroidRequestParameters, DroidScoreListPaginationParameters, DroidRXScoreResponse, DroidRXUserParameters, DroidRXScoreParameters, DroidPerformanceCalculatorParameters, DroidCalculatedData, DroidRXBeatmap }\r\nexport { DroidBanchoUser, DroidRXUser, DroidUser } from \"./DroidUser\"\r\nexport { DroidBanchoScore, DroidRXScore, DroidScore } from \"./DroidScore\"\r\nexport { DroidAPI, DroidScrape } from \"./DroidAPI\"\r\nexport { Utils } from \"./Utils\"\r\n","// @ts-ignore\r\nimport { DroidScoreExtended, NewDroidResponse, NewDroidRequestParameters, DroidBanchoScoresParameters, NewDroidUserParameters, DroidScoreListPaginationParameters, DroidRXUserParameters, DroidRXScoreParameters, DroidRXScoreResponse, DroidPerformanceCalculatorParameters, DroidCalculatedData, DroidRXUserResponse } from \"../typings\";\r\nimport { MapInfo, Accuracy, ModUtil, OsuAPIRequestBuilder, ModCustomSpeed, Modes, ModRelax } from \"@rian8337/osu-base\";\r\nimport { getAverageColor } from \"fast-average-color-node\";\r\nimport { DroidLegacyModConverter } from \"@rian8337/osu-base\";\r\n\r\nimport { DroidDifficultyCalculator, DroidPerformanceCalculator, OsuDifficultyCalculator, OsuPerformanceCalculator, PerformanceCalculationOptions } from \"@rian8337/osu-difficulty-calculator\";\r\nimport { DroidScore, DroidBanchoScore, DroidRXScore } from \"./DroidScore\";\r\nimport { DroidBanchoUser } from \"./DroidUser\";\r\nimport \"dotenv/config\"\r\nimport { DroidScrape } from \"./DroidAPI\";\r\n\r\n\r\nOsuAPIRequestBuilder.setAPIKey(process.env.OSU_API_KEY!)\r\nexport const request = async (params: NewDroidRequestParameters): Promise<NewDroidResponse | undefined> => {\r\n\tconst base_url = `https://new.osudroid.moe/apitest`\r\n\tconst endpoint = params.uid ? `/profile-uid/${params.uid}` : `/profile-username/${params.username}`\r\n\tconst response = await fetch(base_url + endpoint)\r\n\r\n\tif (!response.ok) {\r\n\t\tif (response.status === 404)\r\n\t\t\treturn undefined\r\n\t\telse\r\n\t\t\tthrow new Error(`Request error: ${response.statusText}`)\r\n\t}\r\n\r\n\tlet data = await response.json()\r\n\treturn data\r\n}\r\n\r\nexport const rx = {\r\n\tuser: async (params: DroidRXUserParameters): Promise<DroidRXUserResponse | undefined> => {\r\n\t\tif (!params.username && !params.uid) throw new Error(\"No parameters were provided.\")\r\n\t\tlet url = `https://v4rx.me/api/get_user/`\r\n\t\tif (params.uid) url += `?id=${params.uid}`\r\n\t\telse url += `?name=${params.username}`\r\n\t\tconst response = await fetch(url)\r\n\t\tif (!response.ok) {\r\n\t\t\tif (response.status === 404) return undefined\r\n\t\t\telse throw new Error(\"Request error.\")\r\n\t\t}\r\n\t\tlet data = await response.json()\r\n\t\treturn data\r\n\t},\r\n\tscores: {\r\n\t\trecent: async (params: DroidRXScoreParameters): Promise<DroidRXScoreResponse[] | undefined> => {\r\n\t\t\tif (!params.uid && !params.username) throw new Error(\"No parameters were provided.\")\r\n\t\t\tconst rx_user = await miko.rx.user({ uid: params.uid, username: params.username })\r\n\t\t\tif (!rx_user) return undefined\r\n\t\t\tparams.uid = rx_user.id\r\n\t\t\tconst base_url = `https://v4rx.me/api/`\r\n\t\t\tconst endpoint = `get_scores/?id=${params.uid}&limit=${params.limit || 50}`\r\n\t\t\tlet response = await fetch(base_url + endpoint)\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tif (response.status === 404)\r\n\t\t\t\t\treturn undefined\r\n\t\t\t\telse\r\n\t\t\t\t\tthrow new Error(`Request error: ${response.statusText}`)\r\n\t\t\t}\r\n\t\t\tlet data: DroidRXScoreResponse[] | { error: string } = await response.json()\r\n\t\t\tif (\"error\" in data) throw new Error(data.error)\r\n\t\t\treturn data\r\n\t\t},\r\n\t\ttop: async (params: DroidRXScoreParameters): Promise<DroidRXScoreResponse[] | undefined> => {\r\n\t\t\tif (!params.uid && !params.username) throw new Error(\"No parameters were provided.\")\r\n\t\t\tconst rx_user = await miko.rx.user({ uid: params.uid, username: params.username })\r\n\t\t\tif (!rx_user) return undefined\r\n\t\t\tparams.uid = rx_user.id\r\n\t\t\tconst base_url = `https://v4rx.me/api/`\r\n\t\t\tconst endpoint = `top_scores/?id=${params.uid}&limit=${params.limit || 50}`\r\n\t\t\tlet response = await fetch(base_url + endpoint)\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tif (response.status === 404)\r\n\t\t\t\t\treturn undefined\r\n\t\t\t\telse\r\n\t\t\t\t\tthrow new Error(`Request error: ${response.statusText}`)\r\n\t\t\t}\r\n\t\t\tlet data: DroidRXScoreResponse[] | { error: string } = await response.json()\r\n\t\t\tif (\"error\" in data) throw new Error(data.error)\r\n\t\t\treturn data\r\n\t\t}\r\n\t}\r\n}\r\nexport const user = async (params: NewDroidUserParameters): Promise<DroidBanchoUser | undefined> => {\r\n\tif (!params.username && !params.uid && !params.response) throw new Error(\"No parameters were provided.\")\r\n\treturn await DroidBanchoUser.get({ uid: params.uid, username: params.username })\r\n}\r\n\r\n\r\nexport const scores = async (params: DroidBanchoScoresParameters): Promise<DroidBanchoScore[]> => {\r\n\tlet recents = params.type == \"recent\" ? params.response.Last50Scores : params.response.Top50Plays\r\n\tlet new_scores = recents ? params.response.Last50Scores : params.response.Top50Plays\r\n\tlet old_scores = (await DroidScrape.getUser(params.response.UserId))!.scores![params.type]\r\n\tlet i = 0;\r\n\tlet bancho_scores = old_scores.map(score => new DroidBanchoScore(new_scores[i++], score))\r\n\treturn bancho_scores\r\n\r\n}\r\nconst calculate = async (score: DroidScore) => {\r\n\tif (score.calculated) return\r\n\tlet beatmapInfo = score.beatmap\r\n\tif (!beatmapInfo) {\r\n\t\tconst bmap = await MapInfo.getInformation(score.hash)\r\n\t\tif (!bmap) {\r\n\t\t\tscore.calculated = true\r\n\t\t\treturn\r\n\t\t}\r\n\t\tscore.beatmap = bmap\r\n\t\tbeatmapInfo = bmap\r\n\t}\r\n\tconst isRX = score instanceof DroidRXScore\r\n\tconst isBancho = score instanceof DroidBanchoScore\r\n\tlet accuracy: Accuracy;\r\n\tconst c = score.count;\r\n\tif (c.n100 == 0 && c.n50 == 0 && c.n300 == 0) accuracy = new Accuracy({\r\n\t\tpercent: score.accuracy * 100,\r\n\t\tnmiss: c.nMiss,\r\n\t\tnobjects: beatmapInfo.objects\r\n\t})\r\n\telse accuracy = new Accuracy({\r\n\t\tn300: c.n300,\r\n\t\tn100: c.n100,\r\n\t\tn50: c.n50,\r\n\t\tnmiss: c.nMiss,\r\n\t\tnobjects: beatmapInfo.objects\r\n\t})\r\n\tscore.accuracy = accuracy.value();\r\n\tconst perf_stats: PerformanceCalculationOptions = {\r\n\t\tcombo: score.combo,\r\n\t\taccPercent: accuracy,\r\n\t\tmiss: score.count.nMiss,\r\n\t}\r\n\tconst mods = score.mods;\r\n\tif (mods.has(ModRelax)) mods.delete(ModRelax);\r\n\tconst droid_rating = new DroidDifficultyCalculator().calculate(beatmapInfo.beatmap, mods);\r\n\tif (isBancho) score.replay = await score.getReplay(droid_rating)\r\n\tconst osu_rating = new OsuDifficultyCalculator().calculate(beatmapInfo.beatmap, mods);\r\n\tModUtil.applyModsToBeatmapDifficulty(beatmapInfo.beatmap.difficulty, Modes.osu, mods)\r\n\tscore.difficulty!.ar = osu_rating.approachRate;\r\n\tscore.difficulty!.od = osu_rating.overallDifficulty;\r\n\tscore.difficulty!.cs = beatmapInfo.beatmap.difficulty.cs\r\n\tscore.difficulty!.hp = beatmapInfo.beatmap.difficulty.hp\r\n\tscore.difficulty!.bpm = beatmapInfo.bpm * score.getFinalSpeed()\r\n\tscore.difficulty!.stars.osu = osu_rating.starRating\r\n\tscore.difficulty!.stars.droid = droid_rating.starRating\r\n\tconst osu_performance = new OsuPerformanceCalculator(osu_rating).calculate(perf_stats);\r\n\tconst droid_performance = new DroidPerformanceCalculator(droid_rating).calculate(perf_stats)\r\n\tif (!score.pp) score.pp = osu_performance.total;\r\n\tif (!isRX && !score.dpp) score.dpp = droid_performance.total;\r\n\tif (isBancho && score.replay) {\r\n\t\tconst is3Finger = score.is3Finger();\r\n\t\tconst isSliderCheesing = score.isSliderCheesed();\r\n\t\tif (is3Finger || isSliderCheesing) {\r\n\t\t\tscore.dpp_no_penalty = droid_performance.total;\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\nconst performance = async (details: DroidPerformanceCalculatorParameters): Promise<DroidCalculatedData> => {\r\n\tlet color_hex = \"#dedede\"\r\n\ttry {\r\n\t\tconst color = await getAverageColor(`https://assets.ppy.sh/beatmaps/${details.beatmap!.beatmapSetId}/covers/card.jpg`)\r\n\t\tcolor_hex = color.hex\r\n\t} catch {\r\n\t\tcolor_hex = \"#dedede\"\r\n\t}\r\n\tlet beatmap = details.beatmap!\r\n\r\n\tconst mods = ModUtil.pcStringToMods(details.mods.acronyms.join())\r\n\tif (mods.has(ModCustomSpeed)) mods.set(new ModCustomSpeed(details.mods.speed))\r\n\tlet acc = details.accuracy\r\n\r\n\tconst accuracy = new Accuracy({\r\n\t\tpercent: acc,\r\n\t\tnmiss: details.count.nMiss,\r\n\t\tn300: acc ? undefined : details.count.n300,\r\n\t\tn100: acc ? undefined : details.count.n100,\r\n\t\tn50: acc ? undefined : details.count.n50,\r\n\t\tnobjects: beatmap.objects,\r\n\t});\r\n\r\n\tlet n300 = accuracy.n300\r\n\tlet n100 = accuracy.n100\r\n\tlet n50 = accuracy.n50\r\n\tlet nMiss = accuracy.nmiss\r\n\r\n\tif (details.combo == -1) details.combo = beatmap.maxCombo!\r\n\r\n\tlet silver = /HD|FL/i.test(details.mods.acronyms.join())\r\n\tlet total = n300 + n100 + n50 + nMiss;\r\n\r\n\tlet r300 = n300 / total;\r\n\tlet r50 = n50 / total;\r\n\tlet rank: string;\r\n\tif (r300 === 1) rank = silver ? 'XH' : 'X';\r\n\telse if (r300 > 0.9 && r50 < 0.01 && nMiss === 0) rank = silver ? 'SH' : 'S';\r\n\telse if ((r300 > 0.8 && nMiss === 0) || r300 > 0.9) rank = 'A';\r\n\telse if ((r300 > 0.7 && nMiss === 0) || r300 > 0.8) rank = 'B';\r\n\telse if (r300 > 0.6) rank = 'C';\r\n\telse rank = 'D';\r\n\r\n\tconst perf_stats: PerformanceCalculationOptions = {\r\n\t\tcombo: details.combo,\r\n\t\taccPercent: accuracy,\r\n\t\tmiss: details.count.nMiss,\r\n\t}\r\n\r\n\tconst droid_rating = new DroidDifficultyCalculator().calculate(beatmap.beatmap!, mods);\r\n\tconst osu_rating = new OsuDifficultyCalculator().calculate(beatmap.beatmap!, mods);\r\n\tconst osu_performance = new OsuPerformanceCalculator(osu_rating).calculate(perf_stats);\r\n\tconst droid_performance = new DroidPerformanceCalculator(droid_rating).calculate(perf_stats)\r\n\r\n\tlet mods_str = mods.serializeMods().map(mod => mod.acronym)\r\n\treturn {\r\n\t\tbeatmap: beatmap,\r\n\t\taccuracy: accuracy.value(),\r\n\t\tmods: {\r\n\t\t\tacronyms: mods_str,\r\n\t\t\tspeed: details.mods.speed,\r\n\t\t},\r\n\t\trank: rank,\r\n\t\tcombo: details.combo || beatmap.maxCombo!,\r\n\t\tperformance: {\r\n\t\t\tpp: osu_performance.total,\r\n\t\t\tdpp: droid_performance.total,\r\n\t\t},\r\n\t\tcount: {\r\n\t\t\tn300: n300,\r\n\t\t\tn100: n100,\r\n\t\t\tn50: n50,\r\n\t\t\tnMiss: nMiss,\r\n\t\t\tnGeki: 0,\r\n\t\t\tnKatu: 0,\r\n\t\t},\r\n\t\trating: {\r\n\t\t\tdroid: droid_rating,\r\n\t\t\tosu: osu_rating,\r\n\t\t},\r\n\t\tcolor: color_hex,\r\n\t}\r\n}\r\n\r\nconst score_pagination = async (params: DroidScoreListPaginationParameters): Promise<DroidScoreExtended[]> => {\r\n\tif (!params.scores.length) return []\r\n\tconst start = 5 * params.page\r\n\tconst end = start + 5\r\n\treturn params.scores.slice(start, end)\r\n}\r\n\r\nconst mods = (droid_mods: string) => DroidLegacyModConverter.convert(droid_mods)\r\n\r\nexport const miko = { user, scores, request, calculate, rx, score_pagination, performance, mods }","import { MapInfo, ModCustomSpeed, ModDoubleTime, ModHalfTime, ModMap, ModNightCore, ModRelax } from \"@rian8337/osu-base\";\r\nimport { getAverageColor } from \"fast-average-color-node\";\r\nimport { FCPerformance, HitStatistics, MapDifficulty } from \"typings\";\r\nimport { miko } from \"~/functions\";\r\nimport { DroidRXScore } from \"./index\";\r\nimport cloneDeep from \"lodash/cloneDeep.js\";\r\n\r\nexport class DroidScore {\r\n\tpublic id: number = 0;\r\n\tpublic filename: string = \"\";\r\n\tpublic total_score: number = NaN;\r\n\tpublic combo: number = NaN;\r\n\tpublic rank: string = \"\";\r\n\tpublic accuracy: number = NaN;\r\n\tpublic hash: string = \"\";\r\n\tpublic color: string = \"#dedede\";\r\n\tpublic pp: number | null = null;\r\n\tpublic dpp: number | null = null;\r\n\tpublic played_date: Date = new Date();\r\n\tpublic fc?: FCPerformance;\r\n\tpublic count: HitStatistics = {\r\n\t\tn300: 0,\r\n\t\tnGeki: 0,\r\n\t\tnKatu: 0,\r\n\t\tn100: 0,\r\n\t\tn50: 0,\r\n\t\tnMiss: 0,\r\n\t};\r\n\tpublic mods: ModMap = new ModMap();\r\n\tpublic difficulty: MapDifficulty | undefined;\r\n\tpublic beatmap: MapInfo<true> | undefined;\r\n\tpublic calculated: boolean = false;\r\n\tconstructor() {\r\n\t}\r\n\r\n\tpublic static async getColor(score: DroidScore): Promise<string> {\r\n\t\tif (score.calculated) return score.color\r\n\t\ttry {\r\n\t\t\tconst color = await getAverageColor(`https://assets.ppy.sh/beatmaps/${score.beatmap!.beatmapSetId}/covers/card.jpg`)\r\n\t\t\treturn color.hex\r\n\t\t} catch {\r\n\t\t\treturn \"#dedede\"\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async calculate() {\r\n\t\tif (this.calculated) return\r\n\t\tawait miko.calculate(this)\r\n\t\tthis.color = await DroidScore.getColor(this)\r\n\t\tthis.calculated = true;\r\n\t}\r\n\r\n\tpublic getFinalSpeed(): number {\r\n\t\tlet speed = 1;\r\n\t\tif (this.mods.has(ModNightCore) || this.mods.has(ModDoubleTime)) speed = 1.5\r\n\t\tif (this.mods.has(ModHalfTime)) speed = 0.75\r\n\t\tif (this.mods.has(ModCustomSpeed)) speed *= this.mods.get(ModCustomSpeed)?.trackRateMultiplier!\r\n\t\treturn speed\r\n\t}\r\n\r\n\tpublic getCustomSpeed(): number | undefined {\r\n\t\tif (this.mods.has(ModCustomSpeed)) return this.mods.get(ModCustomSpeed)?.trackRateMultiplier!\r\n\t\telse return undefined\r\n\t}\r\n\r\n\tpublic isFC(): boolean {\r\n\t\tif (this.count.nMiss > 0) return false;\r\n\t\tif (this.beatmap) {\r\n\t\t\tif (this.combo < this.beatmap.maxCombo! - 10) return false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tpublic modsString(): string {\r\n\t\tlet mods_str = \"+\";\r\n\t\tif (this.mods.size == 0) return \"\"\r\n\t\tif (this instanceof DroidRXScore) mods_str += \"RX\";\r\n\t\tmods_str += this.mods.serializeMods().map(mod => mod.acronym).join(\"\");\r\n\t\tif (this.mods.has(ModCustomSpeed)) mods_str += `(${this.getCustomSpeed()}x)`;\r\n\t\treturn mods_str;\r\n\t}\r\n\r\n\tpublic static async calculateFC(score: DroidScore) {\r\n\t\tif (score.isFC()) return;\r\n\t\tlet score_fc = DroidScore.clone(score);\r\n\t\tscore_fc.id = -1;\r\n\t\tscore_fc.calculated = false\r\n\t\tscore_fc.count.n300 += score_fc.count.nMiss;\r\n\t\tscore_fc.count.nMiss = 0;\r\n\t\tscore_fc.combo = score.beatmap?.maxCombo!;\r\n\t\tscore_fc.pp = null;\r\n\t\tscore_fc.dpp = null;\r\n\t\tawait miko.calculate(score_fc);\r\n\t\tscore_fc.calculated = true;\r\n\t\tscore.fc = {\r\n\t\t\tpp: score_fc.pp!,\r\n\t\t\tdpp: score_fc.dpp!,\r\n\t\t\taccuracy: score_fc.accuracy,\r\n\t\t}\r\n\t\treturn score_fc;\r\n\t}\r\n\r\n\tpublic static clone(score: DroidScore): DroidScore {\r\n\t\treturn cloneDeep(score);\r\n\t}\r\n}","\r\nimport { ReplayAnalyzer } from \"@rian8337/osu-droid-replay-analyzer\";\r\nimport { DroidScore } from \"./DroidScore\";\r\nimport { DroidScrapeScore, NewDroidResponseScore } from \"typings\";\r\nimport { APIHandler } from \"~/APIHandler/APIHandler\";\r\nimport { ExtendedDroidDifficultyAttributes } from \"@rian8337/osu-difficulty-calculator\";\r\nimport { Utils } from \"~/Utils\";\r\n\r\nexport class DroidBanchoScore extends DroidScore {\r\n\tpublic replay?: ReplayAnalyzer\r\n\tpublic dpp_no_penalty?: number;\r\n\tconstructor(new_score: NewDroidResponseScore, old_score?: DroidScrapeScore) {\r\n\t\tsuper();\r\n\t\tthis.id = new_score.ScoreId;\r\n\t\tthis.filename = new_score.Filename;\r\n\t\tthis.total_score = new_score.MapScore;\r\n\t\tthis.combo = new_score.MapCombo;\r\n\t\tthis.rank = new_score.MapRank;\r\n\t\tthis.accuracy = new_score.MapAccuracy;\r\n\t\tthis.hash = old_score ? old_score.hash : new_score.MapHash;\r\n\t\tthis.total_score = new_score.MapScore;\r\n\t\tthis.pp = new_score.MapPP;\r\n\t\tthis.played_date = new Date(new_score.PlayedDate);\r\n\t\tthis.mods = Utils.toModMap(new_score.Mods);\r\n\t\tthis.count = {\r\n\t\t\tn300: new_score.MapPerfect,\r\n\t\t\tnGeki: new_score.MapGeki,\r\n\t\t\tnKatu: new_score.MapKatu,\r\n\t\t\tn100: new_score.MapGood,\r\n\t\t\tn50: new_score.MapBad,\r\n\t\t\tnMiss: new_score.MapMiss\r\n\t\t};\r\n\t\tthis.difficulty = {\r\n\t\t\tstars: {\r\n\t\t\t\tosu: null,\r\n\t\t\t\tdroid: null\r\n\t\t\t},\r\n\t\t\tar: null,\r\n\t\t\tod: null,\r\n\t\t\tcs: null,\r\n\t\t\thp: null,\r\n\t\t\tbpm: null,\r\n\t\t}\r\n\t\tthis.beatmap = undefined;\r\n\t}\r\n\r\n\tpublic async getReplay(attributes: ExtendedDroidDifficultyAttributes): Promise<ReplayAnalyzer | undefined> {\r\n\t\tif (this.id == -1 || !this.beatmap) return undefined\r\n\t\tconst data = await APIHandler.get(\"https://osudroid.moe/api\", `/upload/`, `${this.id}.odr`);\r\n\t\tif (!data) return;\r\n\t\tconst replayBuffer = await data.arrayBuffer();\r\n\t\tconst replay = new ReplayAnalyzer({ scoreID: this.id, map: this.beatmap.beatmap, difficultyAttributes: attributes });\r\n\t\treplay.originalODR = Buffer.from(replayBuffer)\r\n\t\tawait replay.analyze();\r\n\t\treplay.checkForSliderCheesing();\r\n\t\treplay.checkFor3Finger();\r\n\t\t// replay.checkFor2Hand();\r\n\t\treturn replay;\r\n\t}\r\n\r\n\tpublic isSliderCheesed(): boolean {\r\n\t\tif (!this.replay) return false\r\n\t\tconst sc = this.replay.sliderCheesePenalty\r\n\t\treturn (sc.aimPenalty != 1 || sc.flashlightPenalty != 1 || sc.visualPenalty != 1)\r\n\t}\r\n\r\n\tpublic is3Finger(): boolean {\r\n\t\tif (!this.replay) return false\r\n\t\treturn this.replay.is3Finger!\r\n\t}\r\n\r\n\t// public is2Hand(): boolean {\r\n\t// \tif (!this.replay) return false\r\n\t// \treturn this.replay.is2Hand!\r\n\t// }\r\n}","export abstract class APIHandler {\r\n\tpublic static async get(base_url: string, endpoint: string, params: any): Promise<Response | undefined> {\r\n\t\tconst url = `${base_url}${endpoint}${params}`\r\n\t\tconst response = await fetch(url)\r\n\t\tif (response.status == 404)\r\n\t\t\treturn undefined\r\n\t\tif (!response.ok)\r\n\t\t\tthrow new Error(`${response.statusText} - URL: \\`${url}\\``)\r\n\t\telse\r\n\t\t\treturn response\r\n\t}\r\n}\r\n","import { ModCustomSpeed, ModMap, ModUtil } from \"@rian8337/osu-base\";\r\n\r\nexport abstract class Utils {\r\n\tpublic static toModMap(mods: string[]): ModMap {\r\n\t\tlet speed = 1;\r\n\t\tconst speed_line = mods.find(mod => mod.startsWith(\"x\"))\r\n\t\tif (speed_line) {\r\n\t\t\tspeed = Number(speed_line.slice(1))\r\n\t\t\tmods.pop();\r\n\t\t}\r\n\t\tconst modMap = ModUtil.pcStringToMods(mods.join(\"\"))\r\n\t\tif (speed != 1) modMap.set(new ModCustomSpeed(speed))\r\n\t\treturn modMap\r\n\t}\r\n}","import { DroidRXBeatmap, DroidRXScoreResponse } from \"typings\";\r\nimport { DroidScore } from \"./DroidScore\";\r\nimport { DroidLegacyModConverter, ModRelax } from \"@rian8337/osu-base\";\r\n\r\nexport class DroidRXScore extends DroidScore {\r\n\tpublic rx_beatmap: DroidRXBeatmap | undefined;\r\n\tconstructor(score: DroidRXScoreResponse) {\r\n\t\tsuper();\r\n\t\tthis.id = score.id;\r\n\t\tif (score.beatmap){\r\n\t\t\tthis.filename = `${score.beatmap.artist} - ${score.beatmap.title} (${score.beatmap.creator}) [${score.beatmap.version}]`;\r\n\t\t\tthis.rx_beatmap = score.beatmap;\r\n\t\t}\r\n\t\tthis.total_score = score.score;\r\n\t\tthis.combo = score.combo;\r\n\t\tthis.rank = score.rank;\r\n\t\tthis.accuracy = score.acc / 100;\r\n\t\tthis.hash = score.maphash;\r\n\t\tthis.color = \"#dedede\";\r\n\t\tthis.pp = score.pp;\r\n\t\tthis.played_date = new Date(score.date);\r\n\t\tthis.mods = DroidLegacyModConverter.convert(score.mods);\r\n\t\tthis.count = {\r\n\t\t\tn300: score.hit300,\r\n\t\t\tnGeki: score.hitgeki,\r\n\t\t\tnKatu: score.hitkatsu,\r\n\t\t\tn100: score.hit100,\r\n\t\t\tn50: score.hit50,\r\n\t\t\tnMiss: score.hitmiss,\r\n\t\t}\r\n\t\tthis.difficulty = {\r\n\t\t\tstars: {\r\n\t\t\t\tosu: score.beatmap ? score.beatmap.star : null,\r\n\t\t\t\tdroid: null\r\n\t\t\t},\r\n\t\t\tar: score.beatmap ? score.beatmap.ar : null,\r\n\t\t\tod: score.beatmap ? score.beatmap.od : null,\r\n\t\t\tcs: score.beatmap ? score.beatmap.cs : null,\r\n\t\t\thp: score.beatmap ? score.beatmap.hp : null,\r\n\t\t\tbpm: score.beatmap ? score.beatmap.bpm : null,\r\n\t\t}\r\n\t\tthis.beatmap = undefined;\r\n\t}\r\n}","import { getAverageColor } from \"fast-average-color-node\";\r\nimport { DroidUserStats } from \"typings\";\r\n\r\nconst default_avatar = `https://osu.ppy.sh/images/layout/avatar-guest@2x.png`\r\nexport abstract class DroidUser {\r\n\tpublic id: number;\r\n\tpublic username: string;\r\n\tpublic color: string;\r\n\tpublic country: string | null;\r\n\tpublic avatar_url: string;\r\n\tpublic url: string;\r\n\tpublic stats: DroidUserStats;\r\n\tconstructor(id: number, username: string, country: string |null) {\r\n\t\tthis.id = id;\r\n\t\tthis.username = username;\r\n\t\tthis.color = `#dedede`;\r\n\t\tthis.country = country;\r\n\t\tthis.avatar_url = default_avatar;\r\n\t\tthis.url = `aasjlsjmsfmsjkbsbfhawiubtonwhuitrghwjmcw`;\r\n\t\tthis.stats = {\r\n\t\t\tpp: 0,\r\n\t\t\tplaycount: 0,\r\n\t\t\taccuracy: 0,\r\n\t\t\trank: {\r\n\t\t\t\tglobal: 0,\r\n\t\t\t\tcountry: null\r\n\t\t\t},\r\n\t\t\tranked_score: null,\r\n\t\t\ttotal_score: 0\r\n\t\t}\r\n\t}\r\n\tprotected static async getAvatarURL(server: \"iBancho\" | \"rx\", uid: number): Promise<string> {\r\n\t\tconst iBancho = (server == \"iBancho\")\r\n\t\tlet url = iBancho ? `https://osudroid.moe/user/avatar/${uid}.png` : `https://v4rx.me/user/avatar/${uid}.png`\r\n\t\tconst response = await fetch(url)\r\n\t\t// because v4rx.me returns 200 even if the avatar doesn't exist\r\n\t\tif (response.headers.get(\"content-type\")?.startsWith(\"text/html\"))\r\n\t\t\treturn default_avatar\r\n\t\tif (response.status == 404)\r\n\t\t\treturn default_avatar\r\n\t\telse\r\n\t\t\treturn response.url\r\n\t}\r\n\r\n\tpublic static async getColor(avatar_url: string): Promise<string> {\r\n\t\tif (avatar_url == default_avatar) return \"#dedede\"\r\n\t\telse {\r\n\t\t\ttry {\r\n\t\t\t\treturn (await getAverageColor(avatar_url)).hex;\r\n\t\t\t} catch {\r\n\t\t\t\treturn \"#dedede\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// :flag:  Username\r\n\tpublic toString(): string {\r\n\t\tif (!this.country)\r\n\t\t\treturn this.username\r\n\t\telse\r\n\t\t\treturn `:flag_${this.country.toLowerCase()}:  ${this.username}`\r\n\t}\r\n\r\n}","import { droid } from \"osu-droid-scraping\";\r\nimport { ModCustomSpeed, ModUtil } from \"@rian8337/osu-base\";\r\nimport { DroidScrapeScore, DroidScrapeUser, NewDroidResponse, NewDroidResponseScore } from \"typings\";\r\nimport { DroidUser } from \"~/DroidUser\";\r\nconst base_url = \"https://osudroid.moe\";\r\n\r\nexport abstract class DroidScrape {\r\n\tprotected static async request(endpoint: string, params: any): Promise<string | undefined> {\r\n\t\tconst url = `${base_url}/${endpoint}${params}`;\r\n\t\tconst response = await fetch(url);\r\n\t\tif (!response.ok)\r\n\t\t\tthrow new Error(`${response.statusText} - URL: \\`${url}\\``);\r\n\t\tif (response.status == 404)\r\n\t\t\treturn undefined;\r\n\t\telse {\r\n\t\t\tconst text = (await response.text()).replace(/\\n/g, \"\");\r\n\t\t\tif (text.includes(`<div style=\"text-align: center; margin-top: 30px;\"><h1>User not found.</h1></div>`)) return undefined;\r\n\t\t\telse return text;\r\n\t\t}\r\n\t}\r\n\tprotected static parseScores(html: string): DroidScrapeScore[] {\r\n\t\tconst score_blocks = html.match(/<li class=\"li\"[\\s\\S]*?<\\/li>/g);\r\n\t\tif (!score_blocks) return [];\r\n\r\n\t\tconst scores = score_blocks.map((block) => {\r\n\t\t\tconst rank = block.match(/(?<=ranking-)[A-Z]+(?=\\.png)/)?.[0]\r\n\t\t\tconst filename = block.match(/<strong[^>]*>(.*?)<\\/strong>/)?.[1]?.trim();\r\n\t\t\tconst statLine = block.match(/<small[^>]*>(.*?)<\\/small>/);\r\n\t\t\tconst [date, pp, score, mod, combo, accuracy] = statLine![1].split(\" / \").map(s => s.trim()) || [];\r\n\t\t\tconst miss = block.match(/miss:\\s*(\\d+)/)?.[1];\r\n\t\t\tconst hash = block.match(/\"hash\":([a-f0-9]+)/)?.[1];\r\n\r\n\t\t\tconst [datePart, timePart] = date.split(\" \");\r\n\t\t\tconst [year, month, day] = datePart.split(\"-\").map(Number);\r\n\t\t\tconst [hour, minute, second] = timePart.split(\":\").map(Number);\r\n\t\t\tconst timestamp = new Date(Date.UTC(year, month - 1, day, hour, minute, second));\r\n\r\n\t\t\tconst mods_str = mod?.replace(\"mod:\", \"\").replace(\"x\", \"\").trim().split(\", \");\r\n\t\t\tconst mods_list = droid.mods(mods_str);\r\n\t\t\tconst mods = ModUtil.pcStringToMods(mods_list.acronyms.join());\r\n\t\t\tif (mods_list.speed != 1) mods.set(new ModCustomSpeed(mods_list.speed));\r\n\t\t\treturn {\r\n\t\t\t\trank: rank!,\r\n\t\t\t\tfilename: filename!,\r\n\t\t\t\tdate: timestamp,\r\n\t\t\t\tpp: Number(pp?.replace(\"pp:\", \"\").trim()) || null,\r\n\t\t\t\tcolor: \"#dedede\",\r\n\t\t\t\tscore: Number(score?.replace(\"score:\", \"\").replace(/,/g, \"\").trim()),\r\n\t\t\t\tcombo: Number(combo?.replace(\"combo:\", \"\").replace(\"x\", \"\").trim()),\r\n\t\t\t\taccuracy: Number(accuracy?.replace(\"accuracy:\", \"\").replace(\"%\", \"\").trim()) / 100,\r\n\t\t\t\tmiss: Number(miss?.trim()),\r\n\t\t\t\tmods: mods,\r\n\t\t\t\thash: hash?.trim()!,\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn scores;\r\n\t}\r\n\r\n\tprotected static parse(html: string): DroidScrapeUser {\r\n\t\tconst username = html.match(/<a[^>]*margin-top: 15px[^>]*>(.*?)<\\/a>/)?.[1]?.trim();\r\n\t\tconst uid = html.match(/uid ‹ (\\d+) ›/)?.[1]?.trim();\r\n\t\tconst location = html.match(/Location:\\s*<a>(.*?)<\\/a>/)?.[1]?.trim();\r\n\t\tconst score_rank = html.match(/Score Rank:\\s*<a>#\\s*(\\d+)<\\/a>/)?.[1]?.trim().replace(/,/g, \"\");\r\n\t\tconst pp_rank = html.match(/PP Rank:\\s*<a>#\\s*(\\d+)<\\/a>/)?.[1]?.trim().replace(/,/g, \"\");\r\n\t\tconst ranked_score = html.match(/Ranked Score<\\/td>\\s*<td>([\\d,]+)<\\/td>/)?.[1]?.trim().replace(/,/g, \"\");\r\n\t\tconst pp = html.match(/Performance Points<\\/td>\\s*<td>([\\d,]+pp)<\\/td>/)?.[1]?.trim().slice(0, -2).replace(/,/g, \"\");\r\n\t\tconst accuracy = html.match(/Hit Accuracy<\\/td>\\s*<td>([\\d.]+%)<\\/td>/)?.[1]?.trim().slice(0, -1);\r\n\t\tconst playcount = html.match(/Play Count<\\/td>\\s*<td>(\\d+)<\\/td>/)?.[1]?.trim().replace(/,/g, \"\");\r\n\t\tconst avatar_url = `https://osudroid.moe/` + html.match(/<img[^>]+src=\"\\.\\/*(user\\/avatar\\/[^\"]+\\.png)\"/)?.[1];\r\n\t\tconst split = html.split(`<b style=\"color: #EB2F96;\">Recent Plays</b>`);\r\n\r\n\r\n\t\tconst user: DroidScrapeUser = {\r\n\t\t\tusername: username!,\r\n\t\t\tuid: Number(uid),\r\n\t\t\tcountry: location!,\r\n\t\t\trank: {\r\n\t\t\t\tscore: Number(score_rank),\r\n\t\t\t\tpp: Number(pp_rank),\r\n\t\t\t},\r\n\t\t\tranked_score: Number(ranked_score),\r\n\t\t\tpp: Number(pp),\r\n\t\t\taccuracy: Number(accuracy),\r\n\t\t\tplaycount: Number(playcount),\r\n\t\t\tavatar_url: avatar_url,\r\n\t\t\tcolor: \"#dedede\",\r\n\t\t}\r\n\t\tconst top = DroidScrape.parseScores(split[0]);\r\n\t\tconst recent = DroidScrape.parseScores(split[1]);\r\n\t\tuser.scores = { top, recent }\r\n\r\n\t\treturn user\r\n\t}\r\n\tpublic static async getUser(uid: number): Promise<DroidScrapeUser | undefined> {\r\n\t\tconst endpoint = `profile.php?uid=`;\r\n\t\tconst data = await DroidScrape.request(endpoint, uid);\r\n\t\tif (!data) return undefined;\r\n\t\tconst user = DroidScrape.parse(data);\r\n\t\tuser.color = await DroidUser.getColor(user.avatar_url);\r\n\t\treturn user\r\n\t}\r\n\r\n\tprotected static temp_scores_toNew(old_scores: DroidScrapeScore[]): NewDroidResponseScore[] {\r\n\t\tconst scores: NewDroidResponseScore[] = []\r\n\t\tfor (const score of old_scores) {\r\n\t\t\tconst score_converted: NewDroidResponseScore = {\r\n\t\t\t\tScoreId: -1,\r\n\t\t\t\tFilename: score.filename,\r\n\t\t\t\tMapHash: score.hash,\r\n\t\t\t\tMods: score.mods.serializeMods().map(mod => mod.acronym),\r\n\t\t\t\tMapScore: score.score,\r\n\t\t\t\tMapCombo: score.combo,\r\n\t\t\t\tMapRank: score.rank,\r\n\t\t\t\tMapGeki: 0,\r\n\t\t\t\tMapPerfect: 0,\r\n\t\t\t\tMapKatu: 0,\r\n\t\t\t\tMapGood: 0,\r\n\t\t\t\tMapBad: 0,\r\n\t\t\t\tMapMiss: score.miss,\r\n\t\t\t\tMapAccuracy: score.accuracy,\r\n\t\t\t\tMapPP: score.pp,\r\n\t\t\t\tPlayedDate: score.date.toISOString(),\r\n\t\t\t}\r\n\t\t\tscores.push(score_converted)\r\n\t\t}\r\n\t\treturn scores\r\n\t}\r\n\r\n\tpublic static temp_toNew(user: DroidScrapeUser): NewDroidResponse {\r\n\t\tconst user_converted: NewDroidResponse = {\r\n\t\t\tUserId: user.uid,\r\n\t\t\tUsername: user.username,\r\n\t\t\tRegion: user.country,\r\n\t\t\tGlobalRank: user.rank.pp,\r\n\t\t\tCountryRank: null,\r\n\t\t\tOverallScore: user.ranked_score,\r\n\t\t\tOverallPP: user.pp,\r\n\t\t\tOverallPlaycount: user.playcount,\r\n\t\t\tOverallAccuracy: user.accuracy,\r\n\t\t\tRegistered: \"0\",\r\n\t\t\tLastLogin: \"0\",\r\n\t\t\tSupporter: 0,\r\n\t\t\tCoreDeveloper: 0,\r\n\t\t\tDeveloper: 0,\r\n\t\t\tContributor: 0,\r\n\t\t\tTop50Plays: DroidScrape.temp_scores_toNew(user.scores!.top),\r\n\t\t\tLast50Scores: DroidScrape.temp_scores_toNew(user.scores!.recent),\r\n\t\t}\r\n\t\treturn user_converted\r\n\t}\r\n\r\n}","import { NewDroidAPIParameters, NewDroidResponse } from \"typings\";\r\nimport { APIHandler } from \"../APIHandler/APIHandler\";\r\nconst base_url = \"https://new.osudroid.moe/api2/frontend\";\r\n\r\nexport abstract class DroidAPI {\r\n\tpublic static async getUser(params: NewDroidAPIParameters): Promise<NewDroidResponse | undefined> {\r\n\t\tif (!params.uid && !params.username) throw new Error(\"No parameters were provided.\")\r\n\t\tconst isUID = (params.uid) ? true : false\r\n\t\tconst endpoint = isUID ? \"/profile-uid/\" : \"/profile-username/\";\r\n\t\tconst req_params = isUID ? params.uid : params.username;\r\n\t\tconst req = await APIHandler.get(base_url, endpoint, req_params);\r\n\t\tif (!req) return undefined;\r\n\t\tconst response = await req.json() as NewDroidResponse;\r\n\t\tif (response.error) throw new Error(response.error);\r\n\t\treturn response;\r\n\t}\r\n}","import { DroidScrapeUser, NewDroidResponse } from \"typings\";\r\nimport { DroidUser } from \"./DroidUser\";\r\nimport { DroidBanchoScore } from \"~/DroidScore\";\r\nimport { DroidAPI, DroidScrape } from \"~/DroidAPI\";\r\n\r\nexport class DroidBanchoUser extends DroidUser {\r\n\tpublic registered: Date;\r\n\tpublic last_login: Date;\r\n\tpublic supporter: boolean;\r\n\tpublic core_developer: boolean;\r\n\tpublic developer: boolean;\r\n\tpublic contributor: boolean;\r\n\t#response: NewDroidResponse;\r\n\t#oldresponse: DroidScrapeUser | undefined;\r\n\tconstructor(data: NewDroidResponse, old_response?: DroidScrapeUser) {\r\n\t\tsuper(data.UserId, data.Username, data.Region)\r\n\t\tthis.stats = {\r\n\t\t\trank: {\r\n\t\t\t\tglobal: data.GlobalRank,\r\n\t\t\t\tcountry: data.CountryRank\r\n\t\t\t},\r\n\t\t\tranked_score: null,\r\n\t\t\ttotal_score: data.OverallScore,\r\n\t\t\tpp: data.OverallPP,\r\n\t\t\tplaycount: data.OverallPlaycount,\r\n\t\t\taccuracy: data.OverallAccuracy,\r\n\t\t}\r\n\t\tthis.registered = new Date(data.Registered);\r\n\t\tthis.last_login = new Date(data.LastLogin);\r\n\t\tthis.supporter = (data.Supporter == 1);\r\n\t\tthis.core_developer = (data.CoreDeveloper == 1);\r\n\t\tthis.developer = (data.Developer == 1);\r\n\t\tthis.contributor = (data.Contributor == 1);\r\n\t\tthis.url = `https://osudroid.moe/profile.php?uid=${data.UserId}`;\r\n\t\tthis.#response = data;\r\n\t\tif (old_response) {\r\n\t\t\tthis.#oldresponse = old_response;\r\n\t\t\tthis.avatar_url = old_response.avatar_url;\r\n\t\t\tthis.color = old_response.color;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static async get(params: { uid?: number, username?: string }): Promise<DroidBanchoUser | undefined> {\r\n\t\tif (!params.uid && !params.username) throw new Error(\"No parameters were provided.\")\r\n\t\tconst data = await DroidAPI.getUser({ uid: params.uid, username: params.username })\r\n\t\tif (!data) return undefined\r\n\t\tconst user = new DroidBanchoUser(data);\r\n\t\tconst avatar_url = await DroidUser.getAvatarURL(\"iBancho\", data.UserId);\r\n\t\tconst color = await DroidUser.getColor(avatar_url);\r\n\t\tuser.avatar_url = avatar_url;\r\n\t\tuser.color = color;\r\n\t\treturn user\r\n\t}\r\n\tscores = {\r\n\t\trecent: async (): Promise<DroidBanchoScore[]> => {\r\n\t\t\treturn this.#response.Last50Scores.map(score => new DroidBanchoScore(score))\r\n\t\t},\r\n\t\ttop: async (): Promise<DroidBanchoScore[]> => {\r\n\t\t\treturn this.#response.Top50Plays.map(score => new DroidBanchoScore(score))\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","import { DroidRXScoreResponse, DroidRXUserResponse } from \"typings\";\r\nimport { DroidUser } from \"./DroidUser\";\r\nimport { miko } from \"~/functions\";\r\nimport { DroidRXScore } from \"~/DroidScore\";\r\n\r\nexport class DroidRXUser extends DroidUser {\r\n\tpublic online: boolean;\r\n\tpublic prefix: string | null;\r\n\tconstructor(data: DroidRXUserResponse) {\r\n\t\tsuper(data.id, data.name, data.country);\r\n\t\tthis.online = data.online;\r\n\t\tthis.prefix = data.prefix;\r\n\t\tthis.url = `https://v4rx.me/user/profile.php/?id=${data.id}`;\r\n\t\tthis.stats = {\r\n\t\t\trank: {\r\n\t\t\t\tglobal: data.stats.pp_rank,\r\n\t\t\t\tcountry: null\r\n\t\t\t},\r\n\t\t\tranked_score: data.stats.ranked_score,\r\n\t\t\ttotal_score: data.stats.total_score,\r\n\t\t\tpp: data.stats.pp,\r\n\t\t\tplaycount: data.stats.plays,\r\n\t\t\taccuracy: data.stats.accuracy / 100\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static async get(params: { uid?: number, username?: string }): Promise<DroidRXUser | undefined> {\r\n\t\tconst data = await miko.rx.user({ uid: params.uid, username: params.username })\r\n\t\tif (!data) return undefined\r\n\t\tconst user = new DroidRXUser(data);\r\n\t\tconst avatar_url = await DroidUser.getAvatarURL(\"rx\", data.id);\r\n\t\tconst color = await DroidUser.getColor(avatar_url);\r\n\t\tuser.avatar_url = avatar_url;\r\n\t\tuser.color = color;\r\n\t\treturn user\r\n\t}\r\n\r\n\tscores = {\r\n\t\trecent: async (): Promise<DroidRXScore[]> => {\r\n\t\t\tlet recent_scores = (await miko.rx.scores.recent({ uid: this.id }))!\r\n\t\t\treturn recent_scores.map(score => new DroidRXScore(score))\r\n\t\t},\r\n\t\ttop: async (): Promise<DroidRXScore[]> => {\r\n\t\t\tlet top_scores = (await miko.rx.scores.top({ uid: this.id }))! as DroidRXScoreResponse[]\r\n\t\t\treturn top_scores.map(score => new DroidRXScore(score))\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":"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","names":["import_osu_base","import_fast_average_color_node","cloneDeep","base_url","import_osu_base","mods","import_osu_base","import_fast_average_color_node","import_osu_base","scores","mods","user","base_url","user","user","base_url","mods"]}