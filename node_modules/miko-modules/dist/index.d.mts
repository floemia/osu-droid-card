import * as _rian8337_osu_base from '@rian8337/osu-base';
import { ModMap, MapInfo } from '@rian8337/osu-base';
import { ExtendedDroidDifficultyAttributes, OsuDifficultyAttributes } from '@rian8337/osu-difficulty-calculator';
import { DroidMods } from 'osu-droid-scraping';
import { ReplayAnalyzer } from '@rian8337/osu-droid-replay-analyzer';

interface NewDroidResponse {
	error?: string;
	UserId: number;
	Username: string;
	GlobalRank: number;
	CountryRank: number | null;
	OverallScore: number;
	OverallPP: number;
	OverallPlaycount: number;
	OverallAccuracy: number;
	Registered: string;
	LastLogin: string;
	Region: string;
	Supporter: number;
	CoreDeveloper: number;
	Developer: number;
	Contributor: number;
	Top50Plays: NewDroidResponseScore[];
	Last50Scores: NewDroidResponseScore[];
}

interface DroidRXScoreResponse {
	error?: string;
	acc: number;
	beatmap: {
		ar: number;
		artist: string;
		bpm: number;
		creator: string;
		cs: number;
		hp: number;
		id: number;
		last_update: number;
		max_combo: number;
		md5: string;
		mode: number;
		od: number;
		set_id: number;
		star: number;
		status: number;
		title: string;
		total_length: number;
		version: string;
	};
	combo: number;
	date: number;
	hit100: number;
	hit300: number;
	hit50: number;
	hitgeki: number;
	hitkatsu: number;
	hitmiss: number;
	id: number;
	maphash: string;
	mods: string;
	pp: number;
	rank: string;
	score: number;
	status: number;
}

interface DroidRXBeatmap {
	ar: number;
	artist: string;
	bpm: number;
	creator: string;
	cs: number;
	hp: number;
	id: number;
	last_update: number;
	max_combo: number;
	md5: string;
	mode: number;
	od: number;
	set_id: number;
	star: number;
	status: number;
	title: string;
	total_length: number;
	version: string;
}
interface MapDifficulty {
	stars: ScoreStars;
	ar: number | null;
	od: number | null;
	cs: number | null;
	hp: number | null;
	bpm: number | null;
}
interface DroidUserRanks {
	global: number;
	country: number | null;
}

interface DroidUserStats {
	rank: DroidUserRanks;
	ranked_score: number | null;
	total_score: number;
	pp: number;
	playcount: number;
	accuracy: number;

}

interface DroidRXUserStats {
	accuracy: number;
	id: number;
	is_playing: null | string;
	plays: number;
	pp: number;
	pp_rank: number;
	ranked_score: number;
	score_rank: number;
	total_score: number;
}
interface DroidRXUserResponse {
	country: string | null;
	id: number;
	name: string;
	online: boolean;
	prefix: string | null;
	stats: DroidRXUserStats
}
interface NewDroidResponseScore {
	ScoreId: number;
	Filename: string;
	MapHash: string;
	Mods: string[];
	MapScore: number;
	MapCombo: number;
	MapRank: string;
	MapGeki: number;
	MapPerfect: number;
	MapKatu: number;
	MapGood: number;
	MapBad: number;
	MapMiss: number;
	MapAccuracy: number;
	MapPP: number | null;
	PlayedDate: string;
}

interface HitStatistics {
	nGeki: number,
	n300: number,
	nKatu: number,
	n100: number,
	n50: number,
	nMiss: number
}

interface DroidScoreExtended {
	calculated: boolean;
	id: number;
	filename: string;
	score: number;
	combo: number;
	rank: string;
	dpp: number | null;
	played_date: Date;
	accuracy: number;
	hash: string;
	color: string;
	mods: ModMap;
	count: HitStatistics;
	beatmap?: MapInfo;
}

interface DroidPerformanceCalculatorParameters {
	combo?: number;
	accuracy?: number;
	mods: DroidMods;
	count: HitStatistics;
	beatmap: MapInfo
}

interface DroidCalculatedData {
	beatmap: MapInfo<true>;
	performance: DroidScoreCalculatedData;
	count: HitStatistics;
	mods: DroidMods;
	accuracy: number;
	combo: number
	rank: string;
	color: string;
	rating: {
		droid: ExtendedDroidDifficultyAttributes,
		osu: OsuDifficultyAttributes
	}
}

interface ScoreStars {
	osu: number | null;
	droid: number | null;
}

interface DroidScoreCalculatedData {
	penalty?: boolean
	pp: number | null;
	dpp: number | null;
	dpp_no_penalty?: number
	fc?: {
		pp: number;
		dpp: number;
		accuracy: number;
	}
}

interface DroidBanchoScoresParameters {
	type: "top" | "recent";
	response: NewDroidResponse
}

interface NewDroidRequestParameters {
	uid?: number;
	username?: string;
}
interface NewDroidUserParameters {
	uid?: number;
	username?: string;
	response?: NewDroidResponse
}

interface DroidRXUserParameters {
	uid?: number;
	username?: string;
}

interface DroidRXScoreParameters {
	uid?: number;
	username?: string;
	limit?: number;
}

interface DroidScrapeUser {
	username: string;
	uid: number;
	country: string;
	rank: {
		score: number;
		pp: number;
	}
	ranked_score: number;
	pp: number;
	accuracy: number;
	playcount: number;
	avatar_url: string;
	color: string;
	scores?: {
		top: DroidScrapeScore[];
		recent: DroidScrapeScore[];
	}
}
interface DroidScrapeScore {
	rank: string;
	filename: string;
	date: Date;
	pp: number | null;
	score: number;
	mods: ModMap;
	combo: number;
	accuracy: number;
	miss: number;
	hash: string;
	color: string;
}

interface NewDroidAPIParameters {
	uid?: number;
	username?: string;
}
interface DroidScoreListPaginationParameters {
	scores: DroidScoreExtended[];
	page: number;
	scores_per_page: number;
}
interface FCPerformance {
	pp: number;
	dpp: number;
	accuracy: number;
}

declare class DroidScore {
    id: number;
    filename: string;
    total_score: number;
    combo: number;
    rank: string;
    accuracy: number;
    hash: string;
    color: string;
    pp: number | null;
    dpp: number | null;
    played_date: Date;
    fc?: FCPerformance;
    count: HitStatistics;
    mods: ModMap;
    difficulty: MapDifficulty | undefined;
    beatmap: MapInfo<true> | undefined;
    calculated: boolean;
    constructor();
    static getColor(score: DroidScore): Promise<string>;
    calculate(): Promise<void>;
    getFinalSpeed(): number;
    getCustomSpeed(): number | undefined;
    isFC(): boolean;
    modsString(): string;
    static calculateFC(score: DroidScore): Promise<DroidScore | undefined>;
    static clone(score: DroidScore): DroidScore;
}

declare class DroidBanchoScore extends DroidScore {
    replay?: ReplayAnalyzer;
    dpp_no_penalty?: number;
    constructor(new_score: NewDroidResponseScore, old_score?: DroidScrapeScore);
    getReplay(attributes: ExtendedDroidDifficultyAttributes): Promise<ReplayAnalyzer | undefined>;
    isSliderCheesed(): boolean;
    is3Finger(): boolean;
}

declare class DroidRXScore extends DroidScore {
    rx_beatmap: DroidRXBeatmap | undefined;
    constructor(score: DroidRXScoreResponse);
}

declare abstract class DroidUser {
    id: number;
    username: string;
    color: string;
    country: string | null;
    avatar_url: string;
    url: string;
    stats: DroidUserStats;
    constructor(id: number, username: string, country: string | null);
    protected static getAvatarURL(server: "iBancho" | "rx", uid: number): Promise<string>;
    static getColor(avatar_url: string): Promise<string>;
    toString(): string;
}

declare class DroidBanchoUser extends DroidUser {
    #private;
    registered: Date;
    last_login: Date;
    supporter: boolean;
    core_developer: boolean;
    developer: boolean;
    contributor: boolean;
    constructor(data: NewDroidResponse, old_response?: DroidScrapeUser);
    static get(params: {
        uid?: number;
        username?: string;
    }): Promise<DroidBanchoUser | undefined>;
    scores: {
        recent: () => Promise<DroidBanchoScore[]>;
        top: () => Promise<DroidBanchoScore[]>;
    };
}

declare class DroidRXUser extends DroidUser {
    online: boolean;
    prefix: string | null;
    constructor(data: DroidRXUserResponse);
    static get(params: {
        uid?: number;
        username?: string;
    }): Promise<DroidRXUser | undefined>;
    scores: {
        recent: () => Promise<DroidRXScore[]>;
        top: () => Promise<DroidRXScore[]>;
    };
}

declare const miko: {
    user: (params: NewDroidUserParameters) => Promise<DroidBanchoUser | undefined>;
    scores: (params: DroidBanchoScoresParameters) => Promise<DroidBanchoScore[]>;
    request: (params: NewDroidRequestParameters) => Promise<NewDroidResponse | undefined>;
    calculate: (score: DroidScore) => Promise<void>;
    rx: {
        user: (params: DroidRXUserParameters) => Promise<DroidRXUserResponse | undefined>;
        scores: {
            recent: (params: DroidRXScoreParameters) => Promise<DroidRXScoreResponse[] | undefined>;
            top: (params: DroidRXScoreParameters) => Promise<DroidRXScoreResponse[] | undefined>;
        };
    };
    score_pagination: (params: DroidScoreListPaginationParameters) => Promise<DroidScoreExtended[]>;
    performance: (details: DroidPerformanceCalculatorParameters) => Promise<DroidCalculatedData>;
    mods: (droid_mods: string) => _rian8337_osu_base.ModMap;
};

declare abstract class DroidScrape {
    protected static request(endpoint: string, params: any): Promise<string | undefined>;
    protected static parseScores(html: string): DroidScrapeScore[];
    protected static parse(html: string): DroidScrapeUser;
    static getUser(uid: number): Promise<DroidScrapeUser | undefined>;
    protected static temp_scores_toNew(old_scores: DroidScrapeScore[]): NewDroidResponseScore[];
    static temp_toNew(user: DroidScrapeUser): NewDroidResponse;
}

declare abstract class DroidAPI {
    static getUser(params: NewDroidAPIParameters): Promise<NewDroidResponse | undefined>;
}

declare abstract class Utils {
    static toModMap(mods: string[]): ModMap;
}

export { DroidAPI, DroidBanchoScore, type DroidBanchoScoresParameters, DroidBanchoUser, type DroidCalculatedData, type DroidPerformanceCalculatorParameters, type DroidRXBeatmap, DroidRXScore, type DroidRXScoreParameters, type DroidRXScoreResponse, DroidRXUser, type DroidRXUserParameters, DroidScore, type DroidScoreCalculatedData, type DroidScoreExtended, type DroidScoreListPaginationParameters, DroidScrape, DroidUser, type HitStatistics, type NewDroidRequestParameters, type NewDroidResponse, type NewDroidResponseScore, type NewDroidUserParameters, Utils, miko };
