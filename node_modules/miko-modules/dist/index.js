"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  DroidAPI: () => DroidAPI,
  DroidBanchoScore: () => DroidBanchoScore,
  DroidBanchoUser: () => DroidBanchoUser,
  DroidRXScore: () => DroidRXScore,
  DroidRXUser: () => DroidRXUser,
  DroidScore: () => DroidScore,
  DroidScrape: () => DroidScrape,
  DroidUser: () => DroidUser,
  Utils: () => Utils,
  miko: () => miko
});
module.exports = __toCommonJS(src_exports);

// src/functions.ts
var import_osu_base5 = require("@rian8337/osu-base");
var import_fast_average_color_node3 = require("fast-average-color-node");
var import_osu_base6 = require("@rian8337/osu-base");
var import_osu_difficulty_calculator = require("@rian8337/osu-difficulty-calculator");

// src/DroidScore/DroidScore.ts
var import_osu_base = require("@rian8337/osu-base");
var import_fast_average_color_node = require("fast-average-color-node");
var import_cloneDeep = __toESM(require("lodash/cloneDeep.js"));
var DroidScore = class _DroidScore {
  static {
    __name(this, "DroidScore");
  }
  id = 0;
  filename = "";
  total_score = NaN;
  combo = NaN;
  rank = "";
  accuracy = NaN;
  hash = "";
  color = "#dedede";
  pp = null;
  dpp = null;
  played_date = /* @__PURE__ */ new Date();
  fc;
  count = {
    n300: 0,
    nGeki: 0,
    nKatu: 0,
    n100: 0,
    n50: 0,
    nMiss: 0
  };
  mods = new import_osu_base.ModMap();
  difficulty;
  beatmap;
  calculated = false;
  constructor() {
  }
  static async getColor(score) {
    if (score.calculated) return score.color;
    try {
      const color = await (0, import_fast_average_color_node.getAverageColor)(`https://assets.ppy.sh/beatmaps/${score.beatmap.beatmapSetId}/covers/card.jpg`);
      return color.hex;
    } catch {
      return "#dedede";
    }
  }
  async calculate() {
    if (this.calculated) return;
    await miko.calculate(this);
    this.color = await _DroidScore.getColor(this);
    this.calculated = true;
  }
  getFinalSpeed() {
    let speed = 1;
    if (this.mods.has(import_osu_base.ModNightCore) || this.mods.has(import_osu_base.ModDoubleTime)) speed = 1.5;
    if (this.mods.has(import_osu_base.ModHalfTime)) speed = 0.75;
    if (this.mods.has(import_osu_base.ModCustomSpeed)) speed *= this.mods.get(import_osu_base.ModCustomSpeed)?.trackRateMultiplier;
    return speed;
  }
  getCustomSpeed() {
    if (this.mods.has(import_osu_base.ModCustomSpeed)) return this.mods.get(import_osu_base.ModCustomSpeed)?.trackRateMultiplier;
    else return void 0;
  }
  isFC() {
    if (this.count.nMiss > 0) return false;
    if (this.beatmap) {
      if (this.combo < this.beatmap.maxCombo - 10) return false;
    }
    return true;
  }
  modsString() {
    let mods_str = "+";
    if (this.mods.size == 0) return "";
    if (this instanceof DroidRXScore) mods_str += "RX";
    mods_str += this.mods.serializeMods().map((mod) => mod.acronym).join("");
    if (this.mods.has(import_osu_base.ModCustomSpeed)) mods_str += `(${this.getCustomSpeed()}x)`;
    return mods_str;
  }
  static async calculateFC(score) {
    if (score.isFC()) return;
    let score_fc = _DroidScore.clone(score);
    score_fc.id = -1;
    score_fc.calculated = false;
    score_fc.count.n300 += score_fc.count.nMiss;
    score_fc.count.nMiss = 0;
    score_fc.combo = score.beatmap?.maxCombo;
    score_fc.pp = null;
    score_fc.dpp = null;
    await miko.calculate(score_fc);
    score_fc.calculated = true;
    score.fc = {
      pp: score_fc.pp,
      dpp: score_fc.dpp,
      accuracy: score_fc.accuracy
    };
    return score_fc;
  }
  static clone(score) {
    return (0, import_cloneDeep.default)(score);
  }
};

// src/DroidScore/DroidBanchoScore.ts
var import_osu_droid_replay_analyzer = require("@rian8337/osu-droid-replay-analyzer");

// src/APIHandler/APIHandler.ts
var APIHandler = class {
  static {
    __name(this, "APIHandler");
  }
  static async get(base_url3, endpoint, params) {
    const url = `${base_url3}${endpoint}${params}`;
    const response = await fetch(url);
    if (response.status == 404)
      return void 0;
    if (!response.ok)
      throw new Error(`${response.statusText} - URL: \`${url}\``);
    else
      return response;
  }
};

// src/Utils/Utils.ts
var import_osu_base2 = require("@rian8337/osu-base");
var Utils = class {
  static {
    __name(this, "Utils");
  }
  static toModMap(mods2) {
    let speed = 1;
    const speed_line = mods2.find((mod) => mod.startsWith("x"));
    if (speed_line) {
      speed = Number(speed_line.slice(1));
      mods2.pop();
    }
    const modMap = import_osu_base2.ModUtil.pcStringToMods(mods2.join(""));
    if (speed != 1) modMap.set(new import_osu_base2.ModCustomSpeed(speed));
    return modMap;
  }
};

// src/DroidScore/DroidBanchoScore.ts
var DroidBanchoScore = class extends DroidScore {
  static {
    __name(this, "DroidBanchoScore");
  }
  replay;
  dpp_no_penalty;
  constructor(new_score, old_score) {
    super();
    this.id = new_score.ScoreId;
    this.filename = new_score.Filename;
    this.total_score = new_score.MapScore;
    this.combo = new_score.MapCombo;
    this.rank = new_score.MapRank;
    this.accuracy = new_score.MapAccuracy;
    this.hash = old_score ? old_score.hash : new_score.MapHash;
    this.total_score = new_score.MapScore;
    this.pp = new_score.MapPP;
    this.played_date = new Date(new_score.PlayedDate);
    this.mods = Utils.toModMap(new_score.Mods);
    this.count = {
      n300: new_score.MapPerfect,
      nGeki: new_score.MapGeki,
      nKatu: new_score.MapKatu,
      n100: new_score.MapGood,
      n50: new_score.MapBad,
      nMiss: new_score.MapMiss
    };
    this.difficulty = {
      stars: {
        osu: null,
        droid: null
      },
      ar: null,
      od: null,
      cs: null,
      hp: null,
      bpm: null
    };
    this.beatmap = void 0;
  }
  async getReplay(attributes) {
    if (this.id == -1 || !this.beatmap) return void 0;
    const data = await APIHandler.get("https://osudroid.moe/api", `/upload/`, `${this.id}.odr`);
    if (!data) return;
    const replayBuffer = await data.arrayBuffer();
    const replay = new import_osu_droid_replay_analyzer.ReplayAnalyzer({ scoreID: this.id, map: this.beatmap.beatmap, difficultyAttributes: attributes });
    replay.originalODR = Buffer.from(replayBuffer);
    await replay.analyze();
    replay.checkForSliderCheesing();
    replay.checkFor3Finger();
    return replay;
  }
  isSliderCheesed() {
    if (!this.replay) return false;
    const sc = this.replay.sliderCheesePenalty;
    return sc.aimPenalty != 1 || sc.flashlightPenalty != 1 || sc.visualPenalty != 1;
  }
  is3Finger() {
    if (!this.replay) return false;
    return this.replay.is3Finger;
  }
  // public is2Hand(): boolean {
  // 	if (!this.replay) return false
  // 	return this.replay.is2Hand!
  // }
};

// src/DroidScore/DroidRXScore.ts
var import_osu_base3 = require("@rian8337/osu-base");
var DroidRXScore = class extends DroidScore {
  static {
    __name(this, "DroidRXScore");
  }
  rx_beatmap;
  constructor(score) {
    super();
    this.id = score.id;
    if (score.beatmap) {
      this.filename = `${score.beatmap.artist} - ${score.beatmap.title} (${score.beatmap.creator}) [${score.beatmap.version}]`;
      this.rx_beatmap = score.beatmap;
    }
    this.total_score = score.score;
    this.combo = score.combo;
    this.rank = score.rank;
    this.accuracy = score.acc / 100;
    this.hash = score.maphash;
    this.color = "#dedede";
    this.pp = score.pp;
    this.played_date = new Date(score.date);
    this.mods = import_osu_base3.DroidLegacyModConverter.convert(score.mods);
    this.count = {
      n300: score.hit300,
      nGeki: score.hitgeki,
      nKatu: score.hitkatsu,
      n100: score.hit100,
      n50: score.hit50,
      nMiss: score.hitmiss
    };
    this.difficulty = {
      stars: {
        osu: score.beatmap ? score.beatmap.star : null,
        droid: null
      },
      ar: score.beatmap ? score.beatmap.ar : null,
      od: score.beatmap ? score.beatmap.od : null,
      cs: score.beatmap ? score.beatmap.cs : null,
      hp: score.beatmap ? score.beatmap.hp : null,
      bpm: score.beatmap ? score.beatmap.bpm : null
    };
    this.beatmap = void 0;
  }
};

// src/DroidUser/DroidUser.ts
var import_fast_average_color_node2 = require("fast-average-color-node");
var default_avatar = `https://osu.ppy.sh/images/layout/avatar-guest@2x.png`;
var DroidUser = class {
  static {
    __name(this, "DroidUser");
  }
  id;
  username;
  color;
  country;
  avatar_url;
  url;
  stats;
  constructor(id, username, country) {
    this.id = id;
    this.username = username;
    this.color = `#dedede`;
    this.country = country;
    this.avatar_url = default_avatar;
    this.url = `aasjlsjmsfmsjkbsbfhawiubtonwhuitrghwjmcw`;
    this.stats = {
      pp: 0,
      playcount: 0,
      accuracy: 0,
      rank: {
        global: 0,
        country: null
      },
      ranked_score: null,
      total_score: 0
    };
  }
  static async getAvatarURL(server, uid) {
    const iBancho = server == "iBancho";
    let url = iBancho ? `https://osudroid.moe/user/avatar/${uid}.png` : `https://v4rx.me/user/avatar/${uid}.png`;
    const response = await fetch(url);
    if (response.headers.get("content-type")?.startsWith("text/html"))
      return default_avatar;
    if (response.status == 404)
      return default_avatar;
    else
      return response.url;
  }
  static async getColor(avatar_url) {
    if (avatar_url == default_avatar) return "#dedede";
    else {
      try {
        return (await (0, import_fast_average_color_node2.getAverageColor)(avatar_url)).hex;
      } catch {
        return "#dedede";
      }
    }
  }
  // :flag:  Username
  toString() {
    if (!this.country)
      return this.username;
    else
      return `:flag_${this.country.toLowerCase()}:  ${this.username}`;
  }
};

// src/DroidAPI/DroidScrape.ts
var import_osu_droid_scraping = require("osu-droid-scraping");
var import_osu_base4 = require("@rian8337/osu-base");
var base_url = "https://osudroid.moe";
var DroidScrape = class _DroidScrape {
  static {
    __name(this, "DroidScrape");
  }
  static async request(endpoint, params) {
    const url = `${base_url}/${endpoint}${params}`;
    const response = await fetch(url);
    if (!response.ok)
      throw new Error(`${response.statusText} - URL: \`${url}\``);
    if (response.status == 404)
      return void 0;
    else {
      const text = (await response.text()).replace(/\n/g, "");
      if (text.includes(`<div style="text-align: center; margin-top: 30px;"><h1>User not found.</h1></div>`)) return void 0;
      else return text;
    }
  }
  static parseScores(html) {
    const score_blocks = html.match(/<li class="li"[\s\S]*?<\/li>/g);
    if (!score_blocks) return [];
    const scores2 = score_blocks.map((block) => {
      const rank = block.match(/(?<=ranking-)[A-Z]+(?=\.png)/)?.[0];
      const filename = block.match(/<strong[^>]*>(.*?)<\/strong>/)?.[1]?.trim();
      const statLine = block.match(/<small[^>]*>(.*?)<\/small>/);
      const [date, pp, score, mod, combo, accuracy] = statLine[1].split(" / ").map((s) => s.trim()) || [];
      const miss = block.match(/miss:\s*(\d+)/)?.[1];
      const hash = block.match(/"hash":([a-f0-9]+)/)?.[1];
      const [datePart, timePart] = date.split(" ");
      const [year, month, day] = datePart.split("-").map(Number);
      const [hour, minute, second] = timePart.split(":").map(Number);
      const timestamp = new Date(Date.UTC(year, month - 1, day, hour, minute, second));
      const mods_str = mod?.replace("mod:", "").replace("x", "").trim().split(", ");
      const mods_list = import_osu_droid_scraping.droid.mods(mods_str);
      const mods2 = import_osu_base4.ModUtil.pcStringToMods(mods_list.acronyms.join());
      if (mods_list.speed != 1) mods2.set(new import_osu_base4.ModCustomSpeed(mods_list.speed));
      return {
        rank,
        filename,
        date: timestamp,
        pp: Number(pp?.replace("pp:", "").trim()) || null,
        color: "#dedede",
        score: Number(score?.replace("score:", "").replace(/,/g, "").trim()),
        combo: Number(combo?.replace("combo:", "").replace("x", "").trim()),
        accuracy: Number(accuracy?.replace("accuracy:", "").replace("%", "").trim()) / 100,
        miss: Number(miss?.trim()),
        mods: mods2,
        hash: hash?.trim()
      };
    });
    return scores2;
  }
  static parse(html) {
    const username = html.match(/<a[^>]*margin-top: 15px[^>]*>(.*?)<\/a>/)?.[1]?.trim();
    const uid = html.match(/uid ‹ (\d+) ›/)?.[1]?.trim();
    const location = html.match(/Location:\s*<a>(.*?)<\/a>/)?.[1]?.trim();
    const score_rank = html.match(/Score Rank:\s*<a>#\s*(\d+)<\/a>/)?.[1]?.trim().replace(/,/g, "");
    const pp_rank = html.match(/PP Rank:\s*<a>#\s*(\d+)<\/a>/)?.[1]?.trim().replace(/,/g, "");
    const ranked_score = html.match(/Ranked Score<\/td>\s*<td>([\d,]+)<\/td>/)?.[1]?.trim().replace(/,/g, "");
    const pp = html.match(/Performance Points<\/td>\s*<td>([\d,]+pp)<\/td>/)?.[1]?.trim().slice(0, -2).replace(/,/g, "");
    const accuracy = html.match(/Hit Accuracy<\/td>\s*<td>([\d.]+%)<\/td>/)?.[1]?.trim().slice(0, -1);
    const playcount = html.match(/Play Count<\/td>\s*<td>(\d+)<\/td>/)?.[1]?.trim().replace(/,/g, "");
    const avatar_url = `https://osudroid.moe/` + html.match(/<img[^>]+src="\.\/*(user\/avatar\/[^"]+\.png)"/)?.[1];
    const split = html.split(`<b style="color: #EB2F96;">Recent Plays</b>`);
    const user2 = {
      username,
      uid: Number(uid),
      country: location,
      rank: {
        score: Number(score_rank),
        pp: Number(pp_rank)
      },
      ranked_score: Number(ranked_score),
      pp: Number(pp),
      accuracy: Number(accuracy),
      playcount: Number(playcount),
      avatar_url,
      color: "#dedede"
    };
    const top = _DroidScrape.parseScores(split[0]);
    const recent = _DroidScrape.parseScores(split[1]);
    user2.scores = { top, recent };
    return user2;
  }
  static async getUser(uid) {
    const endpoint = `profile.php?uid=`;
    const data = await _DroidScrape.request(endpoint, uid);
    if (!data) return void 0;
    const user2 = _DroidScrape.parse(data);
    user2.color = await DroidUser.getColor(user2.avatar_url);
    return user2;
  }
  static temp_scores_toNew(old_scores) {
    const scores2 = [];
    for (const score of old_scores) {
      const score_converted = {
        ScoreId: -1,
        Filename: score.filename,
        MapHash: score.hash,
        Mods: score.mods.serializeMods().map((mod) => mod.acronym),
        MapScore: score.score,
        MapCombo: score.combo,
        MapRank: score.rank,
        MapGeki: 0,
        MapPerfect: 0,
        MapKatu: 0,
        MapGood: 0,
        MapBad: 0,
        MapMiss: score.miss,
        MapAccuracy: score.accuracy,
        MapPP: score.pp,
        PlayedDate: score.date.toISOString()
      };
      scores2.push(score_converted);
    }
    return scores2;
  }
  static temp_toNew(user2) {
    const user_converted = {
      UserId: user2.uid,
      Username: user2.username,
      Region: user2.country,
      GlobalRank: user2.rank.pp,
      CountryRank: null,
      OverallScore: user2.ranked_score,
      OverallPP: user2.pp,
      OverallPlaycount: user2.playcount,
      OverallAccuracy: user2.accuracy,
      Registered: "0",
      LastLogin: "0",
      Supporter: 0,
      CoreDeveloper: 0,
      Developer: 0,
      Contributor: 0,
      Top50Plays: _DroidScrape.temp_scores_toNew(user2.scores.top),
      Last50Scores: _DroidScrape.temp_scores_toNew(user2.scores.recent)
    };
    return user_converted;
  }
};

// src/DroidAPI/DroidAPI.ts
var base_url2 = "https://new.osudroid.moe/api2/frontend";
var DroidAPI = class {
  static {
    __name(this, "DroidAPI");
  }
  static async getUser(params) {
    if (!params.uid && !params.username) throw new Error("No parameters were provided.");
    const isUID = params.uid ? true : false;
    const endpoint = isUID ? "/profile-uid/" : "/profile-username/";
    const req_params = isUID ? params.uid : params.username;
    const req = await APIHandler.get(base_url2, endpoint, req_params);
    if (!req) return void 0;
    const response = await req.json();
    if (response.error) throw new Error(response.error);
    return response;
  }
};

// src/DroidUser/DroidBanchoUser.ts
var DroidBanchoUser = class _DroidBanchoUser extends DroidUser {
  static {
    __name(this, "DroidBanchoUser");
  }
  registered;
  last_login;
  supporter;
  core_developer;
  developer;
  contributor;
  #response;
  #oldresponse;
  constructor(data, old_response) {
    super(data.UserId, data.Username, data.Region);
    this.stats = {
      rank: {
        global: data.GlobalRank,
        country: data.CountryRank
      },
      ranked_score: null,
      total_score: data.OverallScore,
      pp: data.OverallPP,
      playcount: data.OverallPlaycount,
      accuracy: data.OverallAccuracy
    };
    this.registered = new Date(data.Registered);
    this.last_login = new Date(data.LastLogin);
    this.supporter = data.Supporter == 1;
    this.core_developer = data.CoreDeveloper == 1;
    this.developer = data.Developer == 1;
    this.contributor = data.Contributor == 1;
    this.url = `https://osudroid.moe/profile.php?uid=${data.UserId}`;
    this.#response = data;
    if (old_response) {
      this.#oldresponse = old_response;
      this.avatar_url = old_response.avatar_url;
      this.color = old_response.color;
    }
  }
  static async get(params) {
    if (!params.uid && !params.username) throw new Error("No parameters were provided.");
    const data = await DroidAPI.getUser({ uid: params.uid, username: params.username });
    if (!data) return void 0;
    const user2 = new _DroidBanchoUser(data);
    const avatar_url = await DroidUser.getAvatarURL("iBancho", data.UserId);
    const color = await DroidUser.getColor(avatar_url);
    user2.avatar_url = avatar_url;
    user2.color = color;
    return user2;
  }
  scores = {
    recent: /* @__PURE__ */ __name(async () => {
      return this.#response.Last50Scores.map((score) => new DroidBanchoScore(score));
    }, "recent"),
    top: /* @__PURE__ */ __name(async () => {
      return this.#response.Top50Plays.map((score) => new DroidBanchoScore(score));
    }, "top")
  };
};

// src/DroidUser/DroidRXUser.ts
var DroidRXUser = class _DroidRXUser extends DroidUser {
  static {
    __name(this, "DroidRXUser");
  }
  online;
  prefix;
  constructor(data) {
    super(data.id, data.name, data.country);
    this.online = data.online;
    this.prefix = data.prefix;
    this.url = `https://v4rx.me/user/profile.php/?id=${data.id}`;
    this.stats = {
      rank: {
        global: data.stats.pp_rank,
        country: null
      },
      ranked_score: data.stats.ranked_score,
      total_score: data.stats.total_score,
      pp: data.stats.pp,
      playcount: data.stats.plays,
      accuracy: data.stats.accuracy / 100
    };
  }
  static async get(params) {
    const data = await miko.rx.user({ uid: params.uid, username: params.username });
    if (!data) return void 0;
    const user2 = new _DroidRXUser(data);
    const avatar_url = await DroidUser.getAvatarURL("rx", data.id);
    const color = await DroidUser.getColor(avatar_url);
    user2.avatar_url = avatar_url;
    user2.color = color;
    return user2;
  }
  scores = {
    recent: /* @__PURE__ */ __name(async () => {
      let recent_scores = await miko.rx.scores.recent({ uid: this.id });
      return recent_scores.map((score) => new DroidRXScore(score));
    }, "recent"),
    top: /* @__PURE__ */ __name(async () => {
      let top_scores = await miko.rx.scores.top({ uid: this.id });
      return top_scores.map((score) => new DroidRXScore(score));
    }, "top")
  };
};

// src/functions.ts
var import_config = require("dotenv/config");
import_osu_base5.OsuAPIRequestBuilder.setAPIKey(process.env.OSU_API_KEY);
var request = /* @__PURE__ */ __name(async (params) => {
  const base_url3 = `https://new.osudroid.moe/apitest`;
  const endpoint = params.uid ? `/profile-uid/${params.uid}` : `/profile-username/${params.username}`;
  const response = await fetch(base_url3 + endpoint);
  if (!response.ok) {
    if (response.status === 404)
      return void 0;
    else
      throw new Error(`Request error: ${response.statusText}`);
  }
  let data = await response.json();
  return data;
}, "request");
var rx = {
  user: /* @__PURE__ */ __name(async (params) => {
    if (!params.username && !params.uid) throw new Error("No parameters were provided.");
    let url = `https://v4rx.me/api/get_user/`;
    if (params.uid) url += `?id=${params.uid}`;
    else url += `?name=${params.username}`;
    const response = await fetch(url);
    if (!response.ok) {
      if (response.status === 404) return void 0;
      else throw new Error("Request error.");
    }
    let data = await response.json();
    return data;
  }, "user"),
  scores: {
    recent: /* @__PURE__ */ __name(async (params) => {
      if (!params.uid && !params.username) throw new Error("No parameters were provided.");
      const rx_user = await miko.rx.user({ uid: params.uid, username: params.username });
      if (!rx_user) return void 0;
      params.uid = rx_user.id;
      const base_url3 = `https://v4rx.me/api/`;
      const endpoint = `get_scores/?id=${params.uid}&limit=${params.limit || 50}`;
      let response = await fetch(base_url3 + endpoint);
      if (!response.ok) {
        if (response.status === 404)
          return void 0;
        else
          throw new Error(`Request error: ${response.statusText}`);
      }
      let data = await response.json();
      if ("error" in data) throw new Error(data.error);
      return data;
    }, "recent"),
    top: /* @__PURE__ */ __name(async (params) => {
      if (!params.uid && !params.username) throw new Error("No parameters were provided.");
      const rx_user = await miko.rx.user({ uid: params.uid, username: params.username });
      if (!rx_user) return void 0;
      params.uid = rx_user.id;
      const base_url3 = `https://v4rx.me/api/`;
      const endpoint = `top_scores/?id=${params.uid}&limit=${params.limit || 50}`;
      let response = await fetch(base_url3 + endpoint);
      if (!response.ok) {
        if (response.status === 404)
          return void 0;
        else
          throw new Error(`Request error: ${response.statusText}`);
      }
      let data = await response.json();
      if ("error" in data) throw new Error(data.error);
      return data;
    }, "top")
  }
};
var user = /* @__PURE__ */ __name(async (params) => {
  if (!params.username && !params.uid && !params.response) throw new Error("No parameters were provided.");
  return await DroidBanchoUser.get({ uid: params.uid, username: params.username });
}, "user");
var scores = /* @__PURE__ */ __name(async (params) => {
  let recents = params.type == "recent" ? params.response.Last50Scores : params.response.Top50Plays;
  let new_scores = recents ? params.response.Last50Scores : params.response.Top50Plays;
  let old_scores = (await DroidScrape.getUser(params.response.UserId)).scores[params.type];
  let i = 0;
  let bancho_scores = old_scores.map((score) => new DroidBanchoScore(new_scores[i++], score));
  return bancho_scores;
}, "scores");
var calculate = /* @__PURE__ */ __name(async (score) => {
  if (score.calculated) return;
  let beatmapInfo = score.beatmap;
  if (!beatmapInfo) {
    const bmap = await import_osu_base5.MapInfo.getInformation(score.hash);
    if (!bmap) {
      score.calculated = true;
      return;
    }
    score.beatmap = bmap;
    beatmapInfo = bmap;
  }
  const isRX = score instanceof DroidRXScore;
  const isBancho = score instanceof DroidBanchoScore;
  let accuracy;
  const c = score.count;
  if (c.n100 == 0 && c.n50 == 0 && c.n300 == 0) accuracy = new import_osu_base5.Accuracy({
    percent: score.accuracy * 100,
    nmiss: c.nMiss,
    nobjects: beatmapInfo.objects
  });
  else accuracy = new import_osu_base5.Accuracy({
    n300: c.n300,
    n100: c.n100,
    n50: c.n50,
    nmiss: c.nMiss,
    nobjects: beatmapInfo.objects
  });
  score.accuracy = accuracy.value();
  const perf_stats = {
    combo: score.combo,
    accPercent: accuracy,
    miss: score.count.nMiss
  };
  const mods2 = score.mods;
  if (mods2.has(import_osu_base5.ModRelax)) mods2.delete(import_osu_base5.ModRelax);
  const droid_rating = new import_osu_difficulty_calculator.DroidDifficultyCalculator().calculate(beatmapInfo.beatmap, mods2);
  if (isBancho) score.replay = await score.getReplay(droid_rating);
  const osu_rating = new import_osu_difficulty_calculator.OsuDifficultyCalculator().calculate(beatmapInfo.beatmap, mods2);
  import_osu_base5.ModUtil.applyModsToBeatmapDifficulty(beatmapInfo.beatmap.difficulty, import_osu_base5.Modes.osu, mods2);
  score.difficulty.ar = osu_rating.approachRate;
  score.difficulty.od = osu_rating.overallDifficulty;
  score.difficulty.cs = beatmapInfo.beatmap.difficulty.cs;
  score.difficulty.hp = beatmapInfo.beatmap.difficulty.hp;
  score.difficulty.bpm = beatmapInfo.bpm * score.getFinalSpeed();
  score.difficulty.stars.osu = osu_rating.starRating;
  score.difficulty.stars.droid = droid_rating.starRating;
  const osu_performance = new import_osu_difficulty_calculator.OsuPerformanceCalculator(osu_rating).calculate(perf_stats);
  const droid_performance = new import_osu_difficulty_calculator.DroidPerformanceCalculator(droid_rating).calculate(perf_stats);
  if (!score.pp) score.pp = osu_performance.total;
  if (!isRX && !score.dpp) score.dpp = droid_performance.total;
  if (isBancho && score.replay) {
    const is3Finger = score.is3Finger();
    const isSliderCheesing = score.isSliderCheesed();
    if (is3Finger || isSliderCheesing) {
      score.dpp_no_penalty = droid_performance.total;
    }
  }
}, "calculate");
var performance = /* @__PURE__ */ __name(async (details) => {
  let color_hex = "#dedede";
  try {
    const color = await (0, import_fast_average_color_node3.getAverageColor)(`https://assets.ppy.sh/beatmaps/${details.beatmap.beatmapSetId}/covers/card.jpg`);
    color_hex = color.hex;
  } catch {
    color_hex = "#dedede";
  }
  let beatmap = details.beatmap;
  const mods2 = import_osu_base5.ModUtil.pcStringToMods(details.mods.acronyms.join());
  if (mods2.has(import_osu_base5.ModCustomSpeed)) mods2.set(new import_osu_base5.ModCustomSpeed(details.mods.speed));
  let acc = details.accuracy;
  const accuracy = new import_osu_base5.Accuracy({
    percent: acc,
    nmiss: details.count.nMiss,
    n300: acc ? void 0 : details.count.n300,
    n100: acc ? void 0 : details.count.n100,
    n50: acc ? void 0 : details.count.n50,
    nobjects: beatmap.objects
  });
  let n300 = accuracy.n300;
  let n100 = accuracy.n100;
  let n50 = accuracy.n50;
  let nMiss = accuracy.nmiss;
  if (details.combo == -1) details.combo = beatmap.maxCombo;
  let silver = /HD|FL/i.test(details.mods.acronyms.join());
  let total = n300 + n100 + n50 + nMiss;
  let r300 = n300 / total;
  let r50 = n50 / total;
  let rank;
  if (r300 === 1) rank = silver ? "XH" : "X";
  else if (r300 > 0.9 && r50 < 0.01 && nMiss === 0) rank = silver ? "SH" : "S";
  else if (r300 > 0.8 && nMiss === 0 || r300 > 0.9) rank = "A";
  else if (r300 > 0.7 && nMiss === 0 || r300 > 0.8) rank = "B";
  else if (r300 > 0.6) rank = "C";
  else rank = "D";
  const perf_stats = {
    combo: details.combo,
    accPercent: accuracy,
    miss: details.count.nMiss
  };
  const droid_rating = new import_osu_difficulty_calculator.DroidDifficultyCalculator().calculate(beatmap.beatmap, mods2);
  const osu_rating = new import_osu_difficulty_calculator.OsuDifficultyCalculator().calculate(beatmap.beatmap, mods2);
  const osu_performance = new import_osu_difficulty_calculator.OsuPerformanceCalculator(osu_rating).calculate(perf_stats);
  const droid_performance = new import_osu_difficulty_calculator.DroidPerformanceCalculator(droid_rating).calculate(perf_stats);
  let mods_str = mods2.serializeMods().map((mod) => mod.acronym);
  return {
    beatmap,
    accuracy: accuracy.value(),
    mods: {
      acronyms: mods_str,
      speed: details.mods.speed
    },
    rank,
    combo: details.combo || beatmap.maxCombo,
    performance: {
      pp: osu_performance.total,
      dpp: droid_performance.total
    },
    count: {
      n300,
      n100,
      n50,
      nMiss,
      nGeki: 0,
      nKatu: 0
    },
    rating: {
      droid: droid_rating,
      osu: osu_rating
    },
    color: color_hex
  };
}, "performance");
var score_pagination = /* @__PURE__ */ __name(async (params) => {
  if (!params.scores.length) return [];
  const start = 5 * params.page;
  const end = start + 5;
  return params.scores.slice(start, end);
}, "score_pagination");
var mods = /* @__PURE__ */ __name((droid_mods) => import_osu_base6.DroidLegacyModConverter.convert(droid_mods), "mods");
var miko = { user, scores, request, calculate, rx, score_pagination, performance, mods };
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DroidAPI,
  DroidBanchoScore,
  DroidBanchoUser,
  DroidRXScore,
  DroidRXUser,
  DroidScore,
  DroidScrape,
  DroidUser,
  Utils,
  miko
});
//# sourceMappingURL=index.js.map